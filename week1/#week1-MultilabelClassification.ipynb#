{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predict tags on StackOverflow with linear models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment you will learn how to predict tags for posts from [StackOverflow](https://stackoverflow.com). To solve this task you will use multilabel classification approach.\n",
    "\n",
    "### Libraries\n",
    "\n",
    "In this task you will need the following libraries:\n",
    "- [Numpy](http://www.numpy.org) — a package for scientific computing.\n",
    "- [Pandas](https://pandas.pydata.org) — a library providing high-performance, easy-to-use data structures and data analysis tools for the Python\n",
    "- [scikit-learn](http://scikit-learn.org/stable/index.html) — a tool for data mining and data analysis.\n",
    "- [NLTK](http://www.nltk.org) — a platform to work with natural language."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data\n",
    "\n",
    "The following cell will download all data required for this assignment into the folder `week1/data`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File data/train.tsv is already downloaded.\n",
      "File data/validation.tsv is already downloaded.\n",
      "File data/test.tsv is already downloaded.\n",
      "File data/text_prepare_tests.tsv is already downloaded.\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "sys.path.append(\"..\")\n",
    "from common.download_utils import download_week1_resources\n",
    "\n",
    "download_week1_resources()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Grading\n",
    "We will create a grader instace below and use it to collect your answers. Note that these outputs will be stored locally inside grader and will be uploaded to platform only after running submiting function in the last part of this assignment. If you want to make partial submission, you can run that cell any time you want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from grader import Grader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "grader = Grader()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Text preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this and most of the following assignments you will need to use a list of stop words. It can be downloaded from *nltk*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this task you will deal with a dataset of post titles from StackOverflow. You are provided a split to 3 sets: *train*, *validation* and *test*. All corpora (except for *test*) contain titles of the posts and corresponding tags (100 tags are available). The *test* set is provided for Coursera's grading and doesn't contain answers. Upload the corpora using *pandas* and look at the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ast import literal_eval\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_data(filename):\n",
    "    data = pd.read_csv(filename, sep='\\t')\n",
    "    data['tags'] = data['tags'].apply(literal_eval)\n",
    "    return data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = read_data('data/train.tsv')\n",
    "validation = read_data('data/validation.tsv')\n",
    "test = pd.read_csv('data/test.tsv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>tags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>How to draw a stacked dotplot in R?</td>\n",
       "      <td>[r]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mysql select all records where a datetime fiel...</td>\n",
       "      <td>[php, mysql]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>How to terminate windows phone 8.1 app</td>\n",
       "      <td>[c#]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>get current time in a specific country via jquery</td>\n",
       "      <td>[javascript, jquery]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Configuring Tomcat to Use SSL</td>\n",
       "      <td>[java]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title                  tags\n",
       "0                How to draw a stacked dotplot in R?                   [r]\n",
       "1  mysql select all records where a datetime fiel...          [php, mysql]\n",
       "2             How to terminate windows phone 8.1 app                  [c#]\n",
       "3  get current time in a specific country via jquery  [javascript, jquery]\n",
       "4                      Configuring Tomcat to Use SSL                [java]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, *title* column contains titles of the posts and *tags* colum countains the tags. It could be noticed that a number of tags for a post is not fixed and could be as many as necessary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For a more comfortable usage, initialize *X_train*, *X_val*, *X_test*, *y_train*, *y_val*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, y_train = train['title'].values, train['tags'].values\n",
    "X_val, y_val = validation['title'].values, validation['tags'].values\n",
    "X_test = test['title'].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of the most known difficulties when working with natural data is that it's unstructured. For example, if you use it \"as is\" and extract tokens just by splitting the titles by whitespaces, you will see that there are many \"weird\" tokens like *3.5?*, *\"Flip*, etc. To prevent the problems, it's usually useful to prepare the data somehow. In this task you'll write a function, which will be also used in the other assignments. \n",
    "\n",
    "**Task 1 (TextPrepare).** Implement the function *text_prepare* following the instructions. After that, run the function *test_test_prepare* to test it on tiny cases and submit it to Coursera."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "REPLACE_BY_SPACE_RE = re.compile('[/(){}\\[\\]\\|@,;]')\n",
    "BAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')\n",
    "STOPWORDS = set(stopwords.words('english'))\n",
    "\n",
    "def text_prepare(text):\n",
    "    \"\"\"\n",
    "        text: a string\n",
    "        \n",
    "        return: modified initial string\n",
    "    \"\"\"\n",
    "    text = text.lower()\n",
    "    text = REPLACE_BY_SPACE_RE.sub(\" \",text)# replace REPLACE_BY_SPACE_RE symbols by space in text\n",
    "    text = BAD_SYMBOLS_RE.sub(\"\",text)# delete symbols which are in BAD_SYMBOLS_RE from text\n",
    "    text = \" \".join(filter(lambda w: not w in STOPWORDS,text.split())) # delete stopwors from text\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_text_prepare():\n",
    "    examples = [\"SQL Server - any equivalent of Excel's CHOOSE function?\",\n",
    "                \"How to free c++ memory vector<int> * arr?\"]\n",
    "    answers = [\"sql server equivalent excels choose function\", \n",
    "               \"free c++ memory vectorint arr\"]\n",
    "    for ex, ans in zip(examples, answers):\n",
    "        if text_prepare(ex) != ans:\n",
    "            return \"Wrong answer for the case: '%s'\" % ex\n",
    "    return 'Basic tests are passed.'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Basic tests are passed.\n"
     ]
    }
   ],
   "source": [
    "print(test_text_prepare())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run your implementation for questions from file *text_prepare_tests.tsv* to earn the points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task TextPrepare is:\n",
      " sqlite php readonly\n",
      "creating multiple textboxes dynamically\n",
      "self one prefer javascript\n",
      "save php date...\n"
     ]
    }
   ],
   "source": [
    "prepared_questions = []\n",
    "for line in open('data/text_prepare_tests.tsv', encoding='utf-8'):\n",
    "    line = text_prepare(line.strip())\n",
    "    prepared_questions.append(line)\n",
    "text_prepare_results = '\\n'.join(prepared_questions)\n",
    "\n",
    "grader.submit_tag('TextPrepare', text_prepare_results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can preprocess the titles using function *text_prepare* and  making sure that the headers don't have bad symbols:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = [text_prepare(x) for x in X_train]\n",
    "X_val = [text_prepare(x) for x in X_val]\n",
    "X_test = [text_prepare(x) for x in X_test]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['draw stacked dotplot r',\n",
       " 'mysql select records datetime field less specified value',\n",
       " 'terminate windows phone 81 app']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each tag and for each word calculate how many times they occur in the train corpus. \n",
    "\n",
    "**Task 2 (WordsTagsCount).** Find 3 most popular tags and 3 most popular words in the train data and submit the results to earn the points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dictionary of all tags from train corpus with their counts.\n",
    "tags_counts = {}\n",
    "# Dictionary of all words from train corpus with their counts.\n",
    "words_counts = {}\n",
    "\n",
    "######################################\n",
    "######### YOUR CODE HERE #############\n",
    "######################################\n",
    "for y in y_train:\n",
    "    for tag in y:\n",
    "        tags_counts[tag] = tags_counts.get(tag,0) + 1\n",
    "\n",
    "for x in X_train:\n",
    "    words = re.split(\"\\\\s+\",x)\n",
    "    for word in words:\n",
    "        words_counts[word] = words_counts.get(word,0)+1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are assume that *tags_counts* and *words_counts* are dictionaries like `{'some_word_or_tag': frequency}`. After appllying the sorting procedure, results will be look like this: `[('most_popular_word_or_tag', frequency), ('less_popular_word_or_tag', frequency), ...]`. The grader gets the results in the following format (two comma-separated strings with line break):\n",
    "\n",
    "    tag1,tag2,tag3\n",
    "    word1,word2,word3\n",
    "\n",
    "Pay attention that in this assignment you should not submit frequencies or some additional information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task WordsTagsCount is:\n",
      " javascript,c#,java\n",
      "using,php,java...\n"
     ]
    }
   ],
   "source": [
    "most_common_tags = sorted(tags_counts.items(), key=lambda x: x[1], reverse=True)[:3]\n",
    "most_common_words = sorted(words_counts.items(), key=lambda x: x[1], reverse=True)[:3]\n",
    "\n",
    "grader.submit_tag('WordsTagsCount', '%s\\n%s' % (','.join(tag for tag, _ in most_common_tags), \n",
    "                                                ','.join(word for word, _ in most_common_words)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Transforming text to a vector\n",
    "\n",
    "Machine Learning algorithms work with numeric data and we cannot use the provided text data \"as is\". There are many ways to transform text data to numeric vectors. In this task you will try to use two of them.\n",
    "\n",
    "#### Bag of words\n",
    "\n",
    "One of the well-known approaches is a *bag-of-words* representation. To create this transformation, follow the steps:\n",
    "1. Find *N* most popular words in train corpus and numerate them. Now we have a dictionary of the most popular words.\n",
    "2. For each title in the corpora create a zero vector with the dimension equals to *N*.\n",
    "3. For each text in the corpora iterate over words which are in the dictionary and increase by 1 the corresponding coordinate.\n",
    "\n",
    "Let's try to do it for a toy example. Imagine that we have *N* = 4 and the list of the most popular words is \n",
    "\n",
    "    ['hi', 'you', 'me', 'are']\n",
    "\n",
    "Then we need to numerate them, for example, like this: \n",
    "\n",
    "    {'hi': 0, 'you': 1, 'me': 2, 'are': 3}\n",
    "\n",
    "And we have the text, which we want to transform to the vector:\n",
    "\n",
    "    'hi how are you'\n",
    "\n",
    "For this text we create a corresponding zero vector \n",
    "\n",
    "    [0, 0, 0, 0]\n",
    "    \n",
    "And interate over all words, and if the word is in the dictionary, we increase the value of the corresponding position in the vector:\n",
    "\n",
    "    'hi':  [1, 0, 0, 0]\n",
    "    'how': [1, 0, 0, 0] # word 'how' is not in our dictionary\n",
    "    'are': [1, 0, 0, 1]\n",
    "    'you': [1, 1, 0, 1]\n",
    "\n",
    "The resulting vector will be \n",
    "\n",
    "    [1, 1, 0, 1]\n",
    "   \n",
    "Implement the described encoding in the function *my_bag_of_words* with the size of the dictionary equals to 5000. To find the most common words use train data. You can test your code using the function *test_my_bag_of_words*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "DICT_SIZE = 5000\n",
    "common_words = sorted(words_counts.items(), key=lambda x: x[1], reverse=True)[:DICT_SIZE]\n",
    "WORDS_TO_INDEX = {w[0]:i for i,w in enumerate(common_words)}\n",
    "INDEX_TO_WORDS = list(common_words[i][0] for i in range(0, len(common_words)))\n",
    "ALL_WORDS = WORDS_TO_INDEX.keys()\n",
    "\n",
    "def my_bag_of_words(text, words_to_index, dict_size):\n",
    "    \"\"\"\n",
    "        text: a string\n",
    "        dict_size: size of the dictionary\n",
    "        \n",
    "        return a vector which is a bag-of-words representation of 'text'\n",
    "    \"\"\"\n",
    "    result_vector = np.zeros(dict_size)\n",
    "    \n",
    "    words = re.split(\"\\\\s+\",text)\n",
    "    indices = list(words_to_index.get(w,0) for w in words)\n",
    "    for i in indices:\n",
    "        result_vector[i] = 1\n",
    "    return result_vector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_my_bag_of_words():\n",
    "    words_to_index = {'hi': 0, 'you': 1, 'me': 2, 'are': 3}\n",
    "    examples = ['hi how are you']\n",
    "    answers = [[1, 1, 0, 1]]\n",
    "    for ex, ans in zip(examples, answers):\n",
    "        if (my_bag_of_words(ex, words_to_index, 4) != ans).any():\n",
    "            return \"Wrong answer for the case: '%s'\" % ex\n",
    "    return 'Basic tests are passed.'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Basic tests are passed.\n"
     ]
    }
   ],
   "source": [
    "print(test_my_bag_of_words())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now apply the implemented function to all samples (this might take up to a minute):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100000\n"
     ]
    }
   ],
   "source": [
    "print(len(X_train))\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import sparse as sp_sparse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape  (100000, 5000)\n",
      "X_val shape  (30000, 5000)\n",
      "X_test shape  (20000, 5000)\n"
     ]
    }
   ],
   "source": [
    "X_train_mybag = sp_sparse.vstack([sp_sparse.csr_matrix(my_bag_of_words(text, WORDS_TO_INDEX, DICT_SIZE)) for text in X_train])\n",
    "X_val_mybag = sp_sparse.vstack([sp_sparse.csr_matrix(my_bag_of_words(text, WORDS_TO_INDEX, DICT_SIZE)) for text in X_val])\n",
    "X_test_mybag = sp_sparse.vstack([sp_sparse.csr_matrix(my_bag_of_words(text, WORDS_TO_INDEX, DICT_SIZE)) for text in X_test])\n",
    "print('X_train shape ', X_train_mybag.shape)\n",
    "print('X_val shape ', X_val_mybag.shape)\n",
    "print('X_test shape ', X_test_mybag.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you might notice, we transform the data to sparse representation, to store the useful information efficiently. There are many [types](https://docs.scipy.org/doc/scipy/reference/sparse.html) of such representations, however slkearn algorithms can work only with [csr](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html#scipy.sparse.csr_matrix) matrix, so we will use this one."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 3 (BagOfWords).** For the 10th row in *X_train_mybag* find how many non-zero elements it has. In this task the answer (variable *non_zero_elements_count*) should be a number, e.g. 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task BagOfWords is:\n",
      " [  0   1  11  33  36 181 304]...\n"
     ]
    }
   ],
   "source": [
    "row = X_train_mybag[9].toarray()[0]\n",
    "non_zero_elements_count = np.nonzero(row)\n",
    "\n",
    "grader.submit_tag('BagOfWords', str(non_zero_elements_count[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TF-IDF\n",
    "\n",
    "The second approach extends the bag-of-words framework by taking into account total frequencies of words in the corpora. It helps to penalize too frequent words and provide better features space. \n",
    "\n",
    "Implement function *tfidf_features* using class [TfidfVectorizer](http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html) from *scikit-learn*. Use *train* corpus to train a vectorizer. Don't forget to take a look into the arguments that you can pass to it. We suggest that you filter out too rare words (occur less than in 5 titles) and too frequent words (occur more than in 90% of the titles). Also, use bigrams along with unigrams in your vocabulary. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tfidf_features(X_train, X_val, X_test):\n",
    "    \"\"\"\n",
    "        X_train, X_val, X_test — samples        \n",
    "        return TF-IDF vectorized representation of each sample and vocabulary\n",
    "    \"\"\"\n",
    "    # Create TF-IDF vectorizer with a proper parameters choice\n",
    "    # Fit the vectorizer on the train set\n",
    "    # Transform the train, test, and val sets and return the result\n",
    "    \n",
    "    \n",
    "    tfidf_vectorizer = TfidfVectorizer(ngram_range=(1, 2),max_df=0.9, min_df=5.0/len(X_train), token_pattern='(\\S+)')\n",
    "    \n",
    "    ######################################\n",
    "    ######### YOUR CODE HERE #############\n",
    "    ######################################\n",
    "    tfidf_vectorizer.fit(X_train)\n",
    "    X_train = tfidf_vectorizer.transform(X_train)\n",
    "    X_val = tfidf_vectorizer.transform(X_val)\n",
    "    X_test = tfidf_vectorizer.transform(X_test)\n",
    "    \n",
    "    return X_train, X_val, X_test, tfidf_vectorizer.vocabulary_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once you have done text preprocessing, always have a look at the results. Be very careful at this step, because the performance of future models will drastically depend on it. \n",
    "\n",
    "In this case, check whether you have c++ or c# in your vocabulary, as they are obviously important tokens in our tags prediction task:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100000, 18300) (30000, 18300) (20000, 18300)\n"
     ]
    }
   ],
   "source": [
    "X_train_tfidf, X_val_tfidf, X_test_tfidf, tfidf_vocab = tfidf_features(X_train, X_val, X_test)\n",
    "tfidf_reversed_vocab = {i:word for word,i in tfidf_vocab.items()}\n",
    "print(X_train_tfidf.shape,X_val_tfidf.shape,X_test_tfidf.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1976\n",
      "1879\n"
     ]
    }
   ],
   "source": [
    "######### YOUR CODE HERE #############\n",
    "print(tfidf_vocab.get('c++',-1))\n",
    "print(tfidf_vocab.get('c#',-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you can't find it, we need to understand how did it happen that we lost them? It happened during the built-in tokenization of TfidfVectorizer. Luckily, we can influence on this process. Get back to the function above and use '(\\S+)' regexp as a *token_pattern* in the constructor of the vectorizer.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, use this transormation for the data and check again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1976\n",
      "1879\n"
     ]
    }
   ],
   "source": [
    "######### YOUR CODE HERE #############\n",
    "print(tfidf_vocab.get('c++',-1))\n",
    "print(tfidf_vocab.get('c#',-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MultiLabel classifier\n",
    "\n",
    "As we have noticed before, in this task each example can have multiple tags. To deal with such kind of prediction, we need to transform labels in a binary form and the prediction will be a mask of 0s and 1s. For this purpose it is convenient to use [MultiLabelBinarizer](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MultiLabelBinarizer.html) from *sklearn*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MultiLabelBinarizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "mlb = MultiLabelBinarizer(classes=sorted(tags_counts.keys()))\n",
    "y_train = mlb.fit_transform(y_train)\n",
    "y_val = mlb.fit_transform(y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implement the function *train_classifier* for training a classifier. In this task we suggest to use One-vs-Rest approach, which is implemented in [OneVsRestClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.multiclass.OneVsRestClassifier.html) class. In this approach *k* classifiers (= number of tags) are trained. As a basic classifier, use [LogisticRegression](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html). It is one of the simplest methods, but often it performs good enough in text classification tasks. It might take some time, because a number of classifiers to train is large."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.linear_model import LogisticRegression, RidgeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_classifier(X_train, y_train):\n",
    "    \"\"\"\n",
    "      X_train, y_train — training data\n",
    "      \n",
    "      return: trained classifier\n",
    "    \"\"\"\n",
    "    \n",
    "    # Create and fit LogisticRegression wraped into OneVsRestClassifier.\n",
    "\n",
    "    ######################################\n",
    "    ######### YOUR CODE HERE #############\n",
    "    ######################################    \n",
    "    classifier = OneVsRestClassifier(LogisticRegression())\n",
    "    classifier.fit(X_train,y_train)\n",
    "    return classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train the classifiers for different data transformations: *bag-of-words* and *tf-idf*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier_mybag = train_classifier(X_train_mybag, y_train)\n",
    "classifier_tfidf = train_classifier(X_train_tfidf, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can create predictions for the data. You will need two types of predictions: labels and scores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_val_predicted_labels_mybag = classifier_mybag.predict(X_val_mybag)\n",
    "y_val_predicted_scores_mybag = classifier_mybag.decision_function(X_val_mybag)\n",
    "\n",
    "y_val_predicted_labels_tfidf = classifier_tfidf.predict(X_val_tfidf)\n",
    "y_val_predicted_scores_tfidf = classifier_tfidf.decision_function(X_val_tfidf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now take a look at how classifier, which uses TF-IDF, works for a few examples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Title:\todbc_exec always fail\n",
      "True labels:\tphp,sql\n",
      "Predicted labels:\t\n",
      "\n",
      "\n",
      "Title:\taccess base classes variable within child class\n",
      "True labels:\tjavascript\n",
      "Predicted labels:\t\n",
      "\n",
      "\n",
      "Title:\tcontenttype application json required rails\n",
      "True labels:\truby,ruby-on-rails\n",
      "Predicted labels:\tjson,ruby-on-rails\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "y_val_pred_inversed = mlb.inverse_transform(y_val_predicted_labels_tfidf)\n",
    "y_val_inversed = mlb.inverse_transform(y_val)\n",
    "for i in range(3):\n",
    "    print('Title:\\t{}\\nTrue labels:\\t{}\\nPredicted labels:\\t{}\\n\\n'.format(\n",
    "        X_val[i],\n",
    "        ','.join(y_val_inversed[i]),\n",
    "        ','.join(y_val_pred_inversed[i])\n",
    "    ))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we would need to compare the results of different predictions, e.g. to see whether TF-IDF transformation helps or to try different regularization techniques in logistic regression. For all these experiments, we need to setup evaluation procedure. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluation\n",
    "\n",
    "To evaluate the results we will use several classification metrics:\n",
    " - [Accuracy](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html)\n",
    " - [F1-score](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html)\n",
    " - [Area under ROC-curve](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_auc_score.html)\n",
    " - [Area under precision-recall curve](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.average_precision_score.html#sklearn.metrics.average_precision_score) \n",
    " \n",
    "Make sure you are familiar with all of them. How would you expect the things work for the multi-label scenario? Read about micro/macro/weighted averaging following the sklearn links provided above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import roc_auc_score \n",
    "from sklearn.metrics import average_precision_score\n",
    "from sklearn.metrics import recall_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implement the function *print_evaluation_scores* which calculates and prints to stdout:\n",
    " - *accuracy*\n",
    " - *F1-score macro/micro/weighted*\n",
    " - *Precision macro/micro/weighted*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_evaluation_scores(y_val, predicted):\n",
    "    \n",
    "    ######################################\n",
    "    ######### YOUR CODE HERE #############\n",
    "    ######################################\n",
    "    print(accuracy_score(y_val, predicted))\n",
    "    print(f1_score(y_val, predicted, average='macro'))  \n",
    "    print(f1_score(y_val, predicted, average='micro'))  \n",
    "    print(f1_score(y_val, predicted, average='weighted'))  \n",
    "    print(average_precision_score(y_val, predicted, average='macro')) \n",
    "    print(average_precision_score(y_val, predicted, average='micro'))  \n",
    "    print(average_precision_score(y_val, predicted, average='weighted'))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bag-of-words\n",
      "0.361266666667\n",
      "0.508344038279\n",
      "0.673440792137\n",
      "0.651222850981\n",
      "0.348660843677\n",
      "0.484099480215\n",
      "0.51342125874\n",
      "Tfidf\n",
      "0.333933333333\n",
      "0.445708674425\n",
      "0.641816370543\n",
      "0.614355816313\n",
      "0.302030567378\n",
      "0.456988433112\n",
      "0.485096950686\n"
     ]
    }
   ],
   "source": [
    "print('Bag-of-words')\n",
    "print_evaluation_scores(y_val, y_val_predicted_labels_mybag)\n",
    "print('Tfidf')\n",
    "print_evaluation_scores(y_val, y_val_predicted_labels_tfidf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You might also want to plot some generalization of the [ROC curve](http://scikit-learn.org/stable/modules/model_evaluation.html#receiver-operating-characteristic-roc) for the case of multi-label classification. Provided function *roc_auc* can make it for you. The input parameters of this function are:\n",
    " - true labels\n",
    " - decision functions scores\n",
    " - number of classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from metrics import roc_auc\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEWCAYAAAB42tAoAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzsnXd8VMX2wL+zu+k9ECAQIPQmRUEE\nAUVUQJ6CojwQxIaFYgEU8KkIjyfvWRAFUVD8iQUbqFhBBZUivXeQDgkQSCC9bXbn98fcJJuwmyyQ\nzSZhvp/PfnLnztx7z5bMmZlz5hwhpUSj0Wg0GleYvC2ARqPRaCo2WlFoNBqNpkS0otBoNBpNiWhF\nodFoNJoS0YpCo9FoNCWiFYVGo9FoSkQrCk2lRwjxvBDiAy889y4hxAkhRLoQ4uryfn5lQAhxVAhx\nSwn1S4QQD1zCfScLIeZfnnQad9GKogIhhOgqhFgjhEgRQpwTQqwWQlzrbbkuFSHER0KIlz39HCnl\nf6WUj3j6OU6YBjwhpQyWUm4tXimEkEKIDEORxAshpgshzMXa3C6E2GC0SxJCfCaEiCnWJloI8X9C\niFNCiDQhxD4hxL+FEEFOnhlrPNdS5u/2MnHWuUspb5NSfuwtmTTuoRVFBUEIEQr8BLwNRAJ1gH8D\nOd6US1Mi9YHdpbRpK6UMBm4EBgIP51cIIe4BPgfeAqoDrVDf919CiAijTSSwFggAOkspQ4BbgXCg\nUZm+G43GFVJK/aoAL6ADkFxCvQl4ETgGnAE+AcKMulhAAg8BJ4DzwHDgWmAHkAzMKna/h4G9Rttf\ngfolPLsTsMa4z3agu3E+EogD7jDKwcBB4H7gMcAK5ALpwI9Gm9rAN8BZ4AjwlMNzJgMLjPeWhuqE\nOzjUTwDijbr9wM0O1813aNfXuDYZWA60cKg7CjxrfC4pwFeA/8V85oCf8Z4kkAEccnG9BBo7lBcA\n7xjHwrjveCfP3AVMMcovAzsBk5u/o+PGc9ONV+eSfjtOru9ufKfjjbangDuBPsDfwDngeYf2HwEv\nF7++2Od9C9Db+C1YDbm2G/XLgUdKeD+tgKXGcxPyn+3kO18InDa+05VAK4e6PsAe43cTDzxrnK+O\nGpwlG/df5e7nfKW9vC6AfhlfBIQCScDHwG1ARLH6h1GdcENUh/wt8KlRF2t0DnMAf6AnkA18B9RA\nzU7OADca7fsZ92oBWIxOZI0LueoYcvUxOpxbjXKUUd/T+AetAcwFvna4tngnYgI2Ay8BvsZ7OQz0\nMuonG3L3AczA/4B1Rl0zlBKs7fCeGzlcN984borqvG8FfFAd3kHA16g/CmxAKaxIlLIc7uK9u/zM\njfoiisDJ9QX1QHNUpzvGoSyBBk6u+zew1jheB/z7In5H+b8Fi7vvo9j13YE84zvyAR5FKfXPgRBU\nx52VL7eT77g7ThRF8e/JoX45LhSF8bxTwDOo33UIcJ2zexnvMQSlxN8CtjnUnQK6GccRwDXG8f9Q\n/zM+xqsbILzdF1TEl156qiBIKVOBrqh/8rnAWSHED0KImkaTIcB0KeVhKWU68C9gULG16P9IKbOl\nlL+hOssvpJRnpJTxqNFSvsF1OPA/KeVeKWUe8F+gnRCivhPR7gMWSykXSyntUsqlwCZUZ47xrIXA\n78a5x0t4m9eiFMwUKWWulPKw8V4HObT5y3iWDfgUaGuct6E6gZZCCB8p5VEp5SEnzxgI/CylXCql\ntKLsCAHA9Q5tZkopT0opzwE/Au1cyOvOZ14aW4QQGSiFtBx41zhf3fh7ysk1pxzqq7loczFc7Puw\nAlONz+9LQ5YZUso0KeVu1Oi8rYtry5LbgdNSyjeM33WalHK9s4ZSyg+N+hyUEmkrhAgzqq2o302o\nlPK8lHKLw/lo1GzaKqVcJQ0NoimKVhQVCKPjflBKGQNchRr1vmVU10YtHeRzDDUbqOlwLsHhOMtJ\nOdg4rg/MEEIkCyHyp90CNXsoTn1gQH5bo31X1D9YPu8b8n4kpUwq4S3WB2oXu9fzxd7DaYfjTMBf\nCGGRUh4ERqM6gTNCiC+FELWdPKPI5ySltKNmIo7vrfgzgnGOO595aVxj3H8gcB2Qb4BONP5GO7km\n2qE+yUWbi+Fi30eSoahB/W7A9W+pzBBC7DYM/+lCiG5AXcDZYKD4dWYhxCtCiENCiFTULAYKle3d\nqEHMMSHECiFEZ+P866iZ1m9CiMNCiOfK9A1VIbSiqKBIKfehpvVXGadOojrafOqhlggSuHhOAI9L\nKcMdXgFSyjUu2n5arG2QlPIVUP+kKEXxCTBSCNHY8W04udeRYvcKkVL2cUdoKeXnUsquqM9BAq86\naVbkcxJCCFSHE+/OM0q6F5f4mUvFApRR+iXj9H6ULWCAY1shhAnVsf1unFoG3GWcd+txTs6V5W+n\nOBlAoEO5VgltSxytSylbSeVBFiylXIX6vTR0Q4bBqOXUW1A2pFjjvDDuu1FK2Q+1PPodylaEMQN5\nRkrZEGXXGiuEuNmN511xaEVRQRBCNBdCPJPvGimEqAvci1qjBvgCGCOEaCCECEYtF31lLB1dLHOA\nfwkhWhnPChNCDHDRdj5whxCilzFy8xdCdHdw4Xwe1QE8jBqhfeLgAppA0X/0DUCaEGKCECLAuN9V\n7rgACyGaCSF6CCH8UHaMLMDupOkC4B9CiJuFED6o9e0clDH+YinLzxzgFeBRIUQtY4njWeBFIcRg\n43OtBXyAsle9aVwz3Sh/nL80KISoY7jatnHyjLOoz8Xxcy/r9+HINqCPECLSkH90CW0TgNiLUHo/\nAdFCiNFCCD8hRIgQ4jon7UJQ33ESSmn9N79CCOErhBgihAgzltJSMX43hmtyY2MwkYJa3nT2m7ri\n0Yqi4pCGWppYb6xpr0N5vzxj1H+IWrNfifIWygaevJQHSSkXoUbjXxpT9V0oA7qztidQo7XnUZ3Q\nCWAcYBJCtAfGAvcbSxWvopRG/hT+/1Brw8lCiO+MNrejbAJHUMsrH6BGgaXhh+poEyk0nv/Libz7\nUXaVt422d6C8snLdeEZxyuwzN2TbadxrnFH+ChgKjEF1cntQ9pQu+Ut4hh3letR6+nohRBpqtpGC\nWjYp/oxMYCqw2vjcO5X1+yjGpyhPuKPAbygvMlcsNP4mCSG2lNAOUCN+lFPCHajv/ABwk5Omn6CW\n0+JRn+G6YvVDgaPGb304ymYD0AQ1Y0tHzfbelVL+WZpcVyJC2240Go1GUxJ6RqHRaDSaEtGKQqPR\naDQlohWFRqPRaEpEKwqNRqPRlEiFizBZGtWrV5exsbHeFkOj0WgqFZs3b06UUkZdyrWVTlHExsay\nadMmb4uh0Wg0lQohxLHSWzlHLz1pNBqNpkS0otBoNBpNiWhFodFoNJoS0YpCo9FoNCWiFYVGo9Fo\nSkQrCo1Go9GUiMfcY4UQH6IihZ6RUl7lpF4AM1AJRTKBBx0yT2k0Go1nkRLsEkwChLiwPscG6blg\nNSKP+5sh3N/5vU6nQ5ZN3Q8J0cEQ6HNhu+w8+Pu8enb+MzoW5qXKzbWRnZ2HzWYn70gKAck5BAf6\nqJjMsaHqvga7d58hJ8eGzWbHtiWBaxpF4msxxv7dYsCsjs+cyWDv3rMX+eEUxZP7KD4CZqFCADvj\nNlSY3yao8Nqzjb8ajeZSsdkh1w55dgjxdd4mPg1OZag2eXaIDYOYEOdtP92tOrM8u7r3Y23Bx3xh\nu20J8NV+sEmw26FdTbivpfN7/ns17ElSnarVDv/pCq2d7AM7ngoPLFadqkTJ+NntBdXnz2eRlJSF\n1Woj9/3t1FhylGiTSbUf3xEeal3Q9v/+bwupqTmcAzLf38HjZh+C8pXD+vsKOvUdO04zd+4WbHYz\npkwTsSfS6ednfI7X1ipyz88+38n+fYnY7RJ7QiZDTRZamI3PZkwHcptEEAekp+XwzjsblV6y2Qmy\n2hkdEACAxZxJIEcK7rl922l27jhTUG5jMdPGYtyzbQ1oFllQ9/XC3WRn2QrK9/zti3++vvNpCj5K\nUcTHpbJu3XHn34WbeDTMuBAiFvjJxYziPWC5lPILo7wf6C6lLDE/cIcOHaTecKepkOxOhDOZ6h80\nzw5d6jjvVDefhg93QsNw1Qk3j4T+TZ3fc9JfsP2s6lDz7PDqDaoTLs7f56DbF8aIFmgUDuvuc37P\niatgzvbC8pQuMOJqp03zGr7P/trBZPuZyQy0sHNhP/z91fgyJyePcyk5rPIzE3HgPJaNp1netzFN\nDqdAVAA0r1Zwn7gTKWRmWrFLiUzKJsYGIfkddevqBSN1a66NuKzjRJ09ibRLTBKC89uZBAQXKr+c\n7DyycwpzL/kDfvlt/c3gWzgOTk3NRoa6mA0UR0L7H2tgzyvzbK9eYf23k0iK28HJ/Ss3Syk7XMo9\nvLkzuw4qCU4+cca5CxSFEOIx4DGAevXqlYtwmkrI6XQ4lw0ZVvXqXAf8nHTU57PhzU2QlQc/HYLu\ndWF2T+f37L0QNidANX/ItsG4a2HUNc7bdv+yaPnvRyCi2POlhKGL4Wxm4bm+jV0ril2JsNohi2ty\njvN2FlOhkgClVBw4nJTJocRMMjOtpKbnsHFMe841iSQ5zI/g2FAA/kAl9E45nU5enp20mFA4/BgA\nvnk51MxMgNyT4JAC6h8nf6Z99jlVuBruPwH4AMnAOhi7eTpnAms4lzkfh/RLWcmN+NbnJWwElHyN\nksp4uUNg6U0MJIIkk1ISV9mWuX3d5ZDqG4k0m9Uykq3wuzMjMOfPEkyiYDkJINdqK1zCAnyEoGAB\nzceEkQmWs3UD2bNi7WXJVylCeEgp30flZaZDhw4601JVINMKKTmQmgtpudAmCnyddOq7E+H97YWd\nf4da8IyLzKlP/A4rHMYeKwZBy+oXtsvKg9nbCst/uUinnZJT2KEnZRde6y4ZVogoNorNzIOXOsOT\nvxeey7XhDLtdcio3j1C7JMRkdAHWwk4kM9PKrFkbSE7OJjk+DUt6BjODgwraWfOyOZVxmv8cXQZn\nYyDXkOVWC5BDAKcIyEN11AdVGsN8Op1ah9VkAQRmmUf9tEtbutjMIJV81E3W+gwkwdS49IblQFTu\nXnx++oSR4cHqu4wJgeHtCurnfbSNZavT+GW/kvf/6lfjzohg1T+/3r1g5nf+fBaNm7xdcF2YxcTh\n6xoqu0jNQLihOQy8CkJ8mT59LZMnL8dsNmG22nkqOoyXmhozyEdaw12FA4o+fT7j9Ol01fZIMt9c\nG0udQB/2pMWxZWAw9w17EIBN7Zoikhvy3XfDL/mz8KaiiEclvc8nxjinqazsSYRNp1WnmpKjDGo3\n13fetv0nkJhVWN7+INR2MtU/nQGf7y0sO7E5FhBUzHh4LNW5oig+y8g11uCPpkDjiMLzIb5wXyv4\nr0NmzWznnToAdYIhPr2w7KBUzp3L4q+/jpOWlkPqhlOE5+Rwr5+fqswpes+RI3/myy93kZKSg90u\n+SgqnBtjwrEEncUnYxknDkaRLOFQrmR11l4ahiVwR5PdpPavxs/pVhDQ89TPMGM40cAYU2fe9PvG\ntdxOWEfRdNwbnNhlPcmKT5dx+kA8fr5m9nx3rxpN+5qgfmHW3K8W7GbOnE1YLCZ8TIL+tzXhkSFt\nlC9noA/4F3Zvs2atJzk5Bx9fE74WMw8+2I6IyAtnLWcTM1m9+jg+PmaCfCKInvwudHW+itElJIlW\nQ7MZaxaYzSZiY8OdGrvD/CR7j7yE2WhnsZiKLKE5MnZsZ8aO7ezWZ7R48ZAi5czMTJ5/+WVef/11\nzCvNdLqxK40bN6ZDhzosWvQ4QlRORfED8IQQ4kuUETulNPuExoPke38UJ8MKL65SSx5nM1W7xfc4\nv8dvR2GqQ6dqFq4VRYhvUUWRYXXeLqDYT9TV0gs4VxTO8C92z0wrTFoNj7ctej6/c3Ikp+iMYu7c\nzRw+fJ6TJ9OJP32Oj1vUpM7e8+o6B2Pyvn2JDPnnx7zZ9xekzYxPP1+IDIK6oRDqi33ZL+Srw1ta\nJXLVKEPhxEaQUT+M2O2zVfkQ1DwE032/Ya+5OzWibiAd+DaLIsOs75ys3PhlnSTi7BoAIiMDqOPC\ngH3wwDmysvKw2k0cSIzk1lsaEhkZCIE1wFz4ns6ezeD7H/ZjMTq/qKhAevVyPhs4cSKFpKRMTCYT\nZrOgTp1Qwp10qlJKstIyGffpLQQFWPDzs1C9uvNloycebcMTj7ZxWlecf79wvVvtosJCaNmolVtt\nmzatVnojwGQS1KgR5FbbS2XJkiWMGjWKI0eUYXzYsGFUq+aefO7gSffYL4DuQHUhRBwwCbV6iZRy\nDrAY5Rp7EOUe+5CnZNE44Z0tsOwYJGSqUfubPaCfk39yiwnm7yksm4VaF3XmThjqV7ScUkKnHlps\nRJWR67xd4EUoirohyisk2EcpDRejNvzNWCd2whLkiwiwqJH/XU3AGGGuWnWM99/fQnJyNufOZtBr\naBNemtDVGKUWnY3MnbuFjRtPFpRP/TSIOh1qA7BydzaH96STlZOC/8Efefu1WsCDWIB0lFsgANnA\nniK3JTDfCShD1X3kM6OgLj60HkczbwDAJK0olyCwIzCbTAWzLoGp4HsSUrJrbRyZxwUhIX7cfntj\n/jnY+ch1yZIDpKfnEhzsS58gX9q1q0Vo8e9WScmoO92NWu2+jUBZSjTuEB8fz+jRo/n6668BaNOm\nDXPmzKFzZ/dmJe7iMUUhpby3lHoJjPLU869I9p+DL/Yqg+6xFOX2OONm520PJhddm0/MdN7Oz6xG\n9fnLKDapRv/OOuHinf/5Ejr1qEDlGRPmpxSM2cXez3qhMK27Gp0H+UC1Eoyc/+qEfcJ1mJzMjNLS\nc7hr0I+cTcrm/LksMrOs/PH7/YTlj2ptwFn1HvccyWLJisLJbb0UyTGTn+rQsyVYU0EqW8ENbVJp\nXyOBOmFp3NTsGDlb97Jmj5kk/Pgh/TXUOkgAmAe5lvtiMb6qID9B6PE9+FhMhIf7ExkZwF13tSDQ\nmf8+wPDebt3+ttualJGgGk8zatQovv/+ewIDA5kyZQpPP/00FkvZd+uVwph9xSMlJGTAoWS1nHJD\nXed+7+m58M7WwnKCi84foFaxUdvZLOftQCkARyNuaq5zRdE4HAa3UJ15mB+0KGHq+8UdrusciQyA\nBy7wri5g/vwdfPTRNuLj0zh5Mo3Jk29kzJgLR1O/7MijQZ8eNHA49/bSXIq48BRQg7ueK9qxv7zQ\nxTLWNWoifAxjhmA1XgZ+Mp2B1ucB+DHmdpZH30SOTwBmISDIF3+UKhkAtES5eGZlWbHZ7AQE+GB2\npUCBBjXNxFS7yWW9pmqSl5dXoAxeffVVfHx8eOONNzzqEaoVRWXgnz/Acgdvnv/r7VxRNI0sWj6R\n6tr2EF1cUZSgVP7TVf2NCoRIf6juYlTfribMcOLjf5Gkp+cyefJyzpzJ4OjRZKxWO2vXDiuoz8i2\n8/GfGaRmSuLORRLYrj1N2qmdm/tlCK98c2Gnfuq8FRD4ZZ/CbFXr/+Hh/lis51BrNRfvTGcTahnK\nLG2cDYjCJO2k+IXha/JBoBZQrorJolmTJ6gR1ZpuPu4uqThb5tFc6aSkpPDiiy/y999/88svvyCE\noFmzZixcuNDjz9aKwpskZcGGU7D2pJo1/Keb83bRxbyBTmU4bxfiqzyHThqG0Fy7sj848ybqUR++\nvEPNLGoGqX0CrrjLhY//RXL+fBZHjyZz7FgKe/ac5cYb69Oly4WjIF9fMzNnbSKmZX1MFn+EEKzZ\nm43JcCg/djaPrUeMYbslkJoNC9e/bcChBGcurOracQyhvsXYbJbupBmwoOkAp+dN0k5wQHXmX/UQ\n/6rVkcBidppIIMzplRrNpSOlZOHChYwePZpTp05hNpvZtm0bV1/tfJOkJ9CKwlv8egTu+7mwXDfE\ntaJoGlG0fNpFDwfKRz/DCrVDICZY2QGcERPiOmzDJSKlJC0t14XhE6ZMWcFbb60vKL/66i0uFUXX\nAV1p1LlwyWnenxfOeFqaN9Ej7/8Iyj1yQZ0zQuVZgsNrkhVwMz+2GsQyIbABByKasL6Wih6Ta1Gy\nNwO6ANWBZ4FQCsf57q30azSXz6FDh3jiiSf45ZdfAOjcuTNz5syhTRv3vL3KCq0oPIVdwt4ktb5f\nN/TC+va1iq54xKUpO0Bxd1CAJhHK+6dJhAr70KYET5O7m5WF9G6TmprDkCHfsmfPWRIS0vH3t5CY\nOP6CdgtXZ5LZuD1DXy90QT3gZ+apD847uauk0XXNAYjM2EFQzkmqVw/Ex8cEGcrIbCaPm7Pfp77c\nUfTKlvcj2o+FgGrMB1aivEYjgZOBNfnD7NzQWx1oiHLTewxodHEfg0ZT5kybNo2JEyeSnZ1NeHg4\nr776Ko888ggmU/kH/daKoqz57Sh8vR9WnlAbzyZ2hqfaX9iueoDq8LcbUR0lcCTZ+Qaxm+vDkced\n2xo8hNVq4/Dh8/z9dxJbt56md+/GdLi2Nit353A+vXB3sN0uSTBVI7JVJJGG+/nCv9LVpiIHVuzJ\nxi7M+AUWdS/NynVhGzBZ8JPpPGUeQZ2AfcpNtDg9P4AaxvTbP5JTYbEMBTbi3mbgBsDHgIt5nEbj\nVTIzM8nOzmbo0KFMmzaNGjVKCYXiQbSiKGvWnYRFBwrLOxNdt701VrmbXhsNN8QoV1BnWDw3gsjM\nsZPrZEl/3LhlfP75zoKyT6A/ATWj+GzlhUtAbXsVjTP22w7neyIEdjpsH0l4QB631/2dbFME/nZn\nMwrjmZEN8Ok2BkKLbdrzrwY122MXggVAiX7YwASgLcp+YANaoWYPGk1F4uzZs+zfv5+uXZXzyIQJ\nE+jevTs33HCDlyXzcPRYT1AhosduTVAjf2cB5zacgn84hEsoKYqnq41rHiQ5OZtdu86wefNJdhzO\nxqdFG2z20q9zpHqoia7NC+0Qcz/YwrGjyQBYfEw8MuwaYmJCIScZji+DMyquUox9F23tvzm/ad2b\nwG6Flg9Aa8PDyclnswlwEempgB7AMOAmILqUthqNt7Hb7Xz44YeMHz8ei8XCvn37iIyMLP3Ci0QI\nUSmjx1YuEjLUDuXFh2HHWVh0J3SNubBd+5rKgHw2S9kVmkW6dlEtZyWRl2enRo3XsRqB5e5+cTAR\ndhWNOcC3qCw5OTaSkgpnD35+FqpVC8AkBLdd488NLQu9pMKy6xIU1JD69cOJyNqGWDUAVqy6UICo\ndpAWCdeOB2GGmu2heivwjwST85+iRI3+j5by3u4HXgVqlfopaDQVh127djF8+HBWr14NwK233kpm\nZqZHFMXloBWFO6TnqhDSjrGJ/op3rijMJnitO9QIhGtqenTZyJHk5Gw2bTrJxo3xtG9fm549LzTH\nWiwmWrapzdl0pRQiotWGuD7XBPCPDkW9o+LjU2nf/iNatIiiadNIuneP5d57Wxe9oS0XTqyga+Ae\nOPIrrN0EWU4yaUV3htu/gtC6F9a5YDswmAsiWxRwHzAX5YlUvupWo7l8MjIymDJlCtOnTycvL4+a\nNWvy1ltvMXDgQEQ5DyDdQSsKdwj2hRHt4D8OMd3/isNlQr7by9dnZvbsjYwcubig/PDD7ZwqCikl\n7Yf0weRX1H311nYX7qGoXTuEU6eeKfqjjVsF296F/V+CXxjkpLgWqs1j6lXjmoueOT2OEVO+GAdR\n3kl6r4KmsnPPPfcUbJobOXIkU6dOJTw83NtiuUQriuK4shs81hY+2V0YkbRGYLnaGPLy7FgsJo6d\nyeOTFRnkWAttS5mWWO55qdAOkuNn5sXPky+4h5QUKIm88+cIDfWjY4sgfC3Ge8jLhvSTkHIYsXUW\nxC2HAMMVN/kQRXYvOyqJoFoQ1gia3AXhTSC2J1jcyyaWgNr3ths1S0grVn818B2g01VpqhITJkwg\nISGB2bNnc911FT8DtDZm53PoPExYCUNaqkiixZESfj6s9jvc08x1GIsyxGaz8+3SUyxddYqtW08z\nYUIX4lIt7D7hIiS3m9SJNDN5ULFx+Z5PYcn97t3g2vHQfLDyRrL4u60U8skE7gSWltIuESi7QMka\njXfIy8vj7bff5ujRo8yYURgF2G63l+ueiMsxZmtFkWGF19bDe9uVq+r1teH7/mV3/8ug+y2f0aT/\nbU7rel/tTxcHz6N//OMzTGYTra+qQevWNejXr7nLKKLVQk34mB1mEZ+0gfMOLr1hDSDlCLQdCa3u\nV8ZmUAbosAaXNIvaCrhIIFpAS9R2iTVA7Yt+gkZT8diwYQOPP/4427Ypz79du3bRqpV7+S7KGu31\ndDl8tQ/edUiLueakCtfdzPteB21v65gfUZrdy7fToEE4t9/eFH9fwS1t/AkJKByNrFsxBB8fJ+66\nJZGwGeYX+90MXgfRZTcVPgbEllB/EL0LWlP1SE5O5vnnn2fOnDlIKalfvz6zZs3ympK4XLSieKAV\nLNwHmxIKz/15vFwUxb59iaxbF8eDD7Yrcj4x1cbvO7IRYZGQC2eOJrB24UpOxITyyX/bOg097VJJ\n5KRC8kH4+2sQDtelx8HujwvLQbXgoX3KSF1GtEN5LzkyHHgNKNsoUxpNxeHLL79k9OjRJCQkYLFY\neOaZZ5g4cSJBQZU3IZNWFGYTzLwFbvoSIvxhShe407OJWxYs2M2bb65j3bo4ADp1iqFZs2qcTrZj\nt0t+3ZbN2v255Dt+Bp87xjff/JPbb29aYn4CrJlqKQmUm+rfX8PqF0sXqPdH0OqBy3tTxSieAP0h\n4MMyfYJGUzH57bffSEhIoEuXLsyePZvWrVuXflEFR9so8lkVB1fXcJ0+swy5554FfPPN3oLyI49c\nTa+Hb+HXrdlF2nVs4kvHxj60ifUt2bc6JwW+ugHO7nDdJrgORDaHut0Lz5n9oOX9EHT5OSTy+RsV\nedWRDC4uEaZGU5nIyckhPj6ehg1VYJjExER+/PFHHnjgAa8E8HOFNma7w9lM8DGBk4TunkBKiRCC\ng6es/LAxq0iYjMTETHbvLtyYJgQ0aFmHrFyIDDbh7ysI8hM8dHMQUaEulpT2fgGLBzuv8zfCkmef\nh8Z3wXX/glqlBb64PHKAp7hw/0M6OgOypuryxx9/MGLECEwmE9u3b8fX1/MDzUtFG7NLIykL+n8H\nvmb4up9aYvIQKam5zPrkb5Z6y4EXAAAgAElEQVT+fpSpL/dgzYE8/j5ZPOqeL9FN6hQ5k2XE0Rt1\nWzD1olx8LdYsSNoFq1+Co79cWN92OPR422U4DE/RCVhf7Nx4VEgNjaYqkpCQwLPPPsv8+fMBaN68\nOXFxcQWziqpG1VcUOTZ4cAnsO6fK/b+Db/qpXMxlzOef72TWwpO0uvVamtxam49WFC4l3XFtAM1q\nF37cq9ecILpWMA0bFiYlCgs0USvCyQwi6xzs+xz+ePLCunuWqeUkIYoaqz1IDmo5aTVqk1zxkN4J\ngPcCIms0nsNutzN37lyee+45kpOT8ff358UXX2TcuHEVejZxuVR9RfHyGhX6O59diTBtI/y37EP3\nnknMpNWtaoknKe4sMjuLXr0aERJg4ta2/kUC7zUbUMLIw26D7++EvCw4/vuF9WENILwx3PZpmdoX\n3OFm4A8XdTag4qzIajRlz1133cUPP/wAQK9evXjnnXdo1KjqO3hXfUUx8mrYdLrQ/fW6aHjpeo88\nqvttV7F7aQ4Aaxeu5OyRU/zvsZE0b+4kGZErkvbARy58rUNjocdMaHTH5Qt7CTxLUSURhJpZDALe\nRSsJTdWnf//+bNiwgRkzZjBgwIAKGcDPE1wZxuxcG7z4Fyw/Dr/cc1nLTllZVvz9LU5/ID9syOTH\nTdnkZuVQLX4Ho0d3ol49N/clbHwdVhZLIRpUS80afEOVMdpLP8o/UTkeHMkBqu5EW6NR/PDDD8TF\nxTFy5EhAOamkp6cTElL5dgJdjjH7yhgE+prhtRth6T8vS0l8/PE2mjadxbvvbnRabzd07lX1fZk+\nvZf7SmLV8xcqib7fwvBTUP8WiO7oNSXRlQuVxBm0ktBUbY4fP86dd95Jv379GDt2LIcPHwZACFEp\nlcTlUvWXnhwJ8yu9jRPOn8/i6ad/4dNP1T6FceOWcsstDWnWrOiSUn5K0TaN3Ng1kJsOB76BXx8G\n6eA7++AeiGhS7p5LztiPMljnMxH4Nzr/g6bqYrVamTlzJpMmTSIjI4OQkBBefvll6tevX/rFVRjv\n90ZlTY4N4tOgQViZjcItFhN//HGkoJyVlcfQoYtYvfrhgtAZB05ZWfe3sk+EBZUyUbPnwdtORiWP\nHIGw2DKR+XJJBJo7lPOAi4wkpdFUKtatW8fjjz/Ojh1qQDhgwADefPNN6tSpU8qVVZ+qt/T00l8q\nl3UZLtWEhPgxY0bvgrLFYuKaa6ILUooePGXltUVppGVJGtey0KGRk4UZaybEr4HfHoM3HaK6RrVR\n+x/G5FUYJbEciHIov41WEpqqz8SJE9mxYwcNGjTg559/ZsGCBVpJGFStGcWaePhwp8prPf0muDW2\nzG7dv38L+vRpwvHjKXz88Z3UaViDt3/NICsnk8ycQoeAx3sFY7GlQ+rpwoszEuCrbhfetNUDKs5S\nBWIGMNqhPAF4wkuyaDSeREpJWloaoaGhAMyaNYtPPvmEF154gcBAHXTGkarl9TTge1h+orB8ZxOY\n28vte+fl2UlLyyEiwrnBOykpk8AgX3bF2dh8yMrmQ7lF6u/o4E9fZsGqCa4fUv0qld+h+3So2d5t\n2cqDD4FhDuX/Ax72kiwajSfZv38/I0eORAjB0qVLrwg3Vx3CA2DH2aJKAuCepm5fvn9/Ivfe+w0R\nEQEsXToUk+nCH061aoFsOJDD3KUZBee6tfSjR2s/LCZBzWV94PhvhReENy48zjgFN05Ty0wVjLOo\nMByHHc79DXg2hq5GU/5kZ2fzv//9j1deeYXc3FyqVavG0aNHadCggbdFq9BUHUWRkwfd68LKOOWn\nGh0EvUr/8qWUfPzxdp58cgnp6WqG8MYbaxg3rssFbb9ancHv25XBOjrCTKt6Fm5t40/kguYq54Mj\nj8dDcMXP03YIaFzs3Ca0ktBUPZYuXcrIkSM5eFD9rz788MO89tprVKumE+6WhkcVhRCiN2rZ2wx8\nIKV8pVh9PeBjINxo85yUcvElPezaaFjYD06nw7cHoG1U6dcYLFiwu0BJALzwwh/06NGANm2j+W1b\nNqlZymi9dn8uErCY4I5r/bl2R39434m4T2eD5dJcccuT+cBQh/J1wAqg4kuu0biPlJJhw4Yxb948\nAFq2bMmcOXPo1s2J3VDjFI8pCiGEGXgHuBWIAzYKIX6QUu5xaPYisEBKOVsI0RJYTMmZM0unVrAK\n2+G+nHz4YT9at55NYqJKPNqnTxOiaoWwel8O323IKtoe+N8ASfjqwXCkmJIYnQtm53mqKxINgSPF\nzn0M3O8FWTQaTyOEIDY2loCAAF566SXGjh1bpQP4eQJPzig6AgellIcBhBBfAv0AR0UhgVDjOAw4\niReoVSuYuXPvYPDgb3jrrd48+NDV/Gt+CqlZVgDqVTdzfXM1zo4WRwn/qEXRGww/Xe7B+S6WScAU\nF3W/AO6b/DWais+2bds4deoUt912GwATJkxg6NCh2hZxiXhSUdQBHK3LcajVDUcmA78JIZ5ExZi7\nxdmNhBCPAY8B1KtXr8wFBbjzzuYcPvw0tWoFsz/eSmqWRAioHWGmb8cA2lY7A+/XLXpRdCe44+sK\nrSQWAf1d1GWjl5k0VYu0tDQmTZrEjBkzqFatGvv27SMyMhI/Pz+tJC4Db2+4uxf4SEoZA/QBPhXi\nwqQKUsr3pZQdpJQdoqLctz0UJyvLSknuwLVqBWO3SxatzzKeC5MHhdF2Sd0LlcQ/voTBayGk4m7I\n6cKFSmINkISaymkloakqSClZtGgRLVu25M033wRg8ODB+PhU/KXgyoAnFUU84Ni7xhjnHBkGLACQ\nUq4F/IGLiMkN7E2CPHupzbKyrPTqNZ+RI3/GZnPdfv2BXA6dVkGbel3tD/NaQuaZwgZdp8IzEpoP\nvCgxy5v7UUohn89RyqEzEOkViTQaz3Ds2DH69u1L//79iYuLo0OHDmzcuJG33nrrigzg5wk8ufS0\nEWgihGiAUhCDgOJJno+jcuF8JIRogVIUZ3GX1Bzo8RUE+cCNdeHmejCoBRTbA2Gz2Rky5FtWrTrO\nqlXHSUjI4LPP+hMQUDjaOHnOxpxf0zmfbis4d9OhQXBub+GNxtrKLYvc5dATWOpQzkJ9sBpNVUNK\nyd13383mzZsJDQ3lv//9L8OHD8ds1kFnyhKP9XpSyjxU9Idfgb0o76bdQogpQoi+RrNngEeFENuB\nL4AH5cVsFV9xQs0mUnLgh4Pw9pYLlATAc88tY9GifQXlRYv28cILRfO0Ld6cxanzNrKtIKSdR3If\no1rCj4UNxtorhZJYRFElsQutJDRVD7tdrQoIIZg2bRoDBw5k3759jBo1SisJD1C5Q3iMXwHzdhZW\nDm8L/7nQN3r37jP07v0ZcXEqu3OrVlGsWvWQCtVhzYBd83h0rZrsdMv7mLutUwgiWV38zz9VqA3f\nij+FPQo4mut0alJNVSMpKYnnnnsOgLlz53pZmsrFlZu4KNACEQ4m2W4xTpu1alWDNWsepmXLKGJi\nQvnll/uICMqD9+vDzGA2rlhW0PaWvPcIajMQ7voZRudA3e6VQklkUFRJ/Exl/3I1mkJUBIWPad68\nOR988AGffPIJcXFx3hbriqFyh/CY3AUmdlZxnv48AZ1deyDVrRvGqlUPkZiYSUxMKLyhlqgOmq7l\nfd8PC9pFP7EFfCtX5MgfUBtU8pmOciHTaKoCe/fuZcSIEaxYsQKA7t27M3v2bGJinA8MNWVP5VYU\nAGYTXF1TvUohMjKAyMgAlZ8ayCSUmX4LC+of6hGE8K1cTqO5FFUSjwFjvCSLRlOWSCl56aWXePXV\nV7FarVSvXp033niDoUOHXhHRXisSlV9RXCzLn4HN05HAv/1WkoVaVurZ1p+OTSrftn5HtbYM5UKm\n0VQFhBDEx8djtVp59NFHeeWVV4iM1M7d3qDKKQq7XbJmzQm6dnWygzsribgtS/jc90eyRTDnTGqb\nR/tGvvS7LgCLuXKNUu5xOG6FVhKays/JkydJTEykTZs2ALz22msMGzaMLl0ujOasKT+qnL1z9uyN\ndOs2j3/843P27Cm2JeO7fizyeZED5us5YVI/xBphJob3CsbXUrmUxEvANw7lXd4SRKMpA2w2G7Nm\nzaJFixYMGjSI3FwVzbl69epaSVQAqpSiSE3NKdgfsXjxAdq0mc28eVtVpbSTe3IzO8wq9/XNbfx4\ncUAoE/8Z5i1xL5m/gP84lE+7aqjRVAK2bNlCp06dePLJJ0lNTaVRo0akpqZ6WyyNA24tPQkhfIF6\nUsqDpTYuD/afg7c2QeMIaBQOrapDkwhmz95ISkpOQTM/Pws33WQ4ja6bSoooNHjfdk0AYYGVT0/u\nABx3iiQANbwki0ZzOaSmpjJx4kRmzZqF3W4nJiaGmTNncuedd2pjdQWjVEUhhPgHyuPSF2gghGgH\nTJJS3uVp4Vyy8yx8/XdhuVcszL+dq6+OpmPHOmzYoEJKjR9/PbGx4arNmpfYZS7MAF3ZlIQE3gNG\nOJz7Ga0kNJUTKSU33HAD27dvx2w2M3bsWCZPnqxjM1VQ3Oktp6DCgycDSCm3cWH2zPLlUHLRcuMI\nAHr2bMS6dcP4888HuP32pjzxREdVLyUS+NnnGQDqVq98W/xHUVRJzEHvldBUXoQQjBkzho4dO7Jp\n0ybeeOMNrSQqMO4sPVmllMnFpoLejftxsJiiaBRecCiEoHv3WLp3j1UnpITPOvKVz1RSRC0Abm5d\nuaIfZQKzHcp5qLyxGk1lITc3l+nTp2M2mxk3bhwA999/P/fdd5+OzVQJcEdR7BVC/BMwGZFgnwLW\neVasUhjZDq6vrWYWB5OhdQmRyc8fYFniNfzuO7zgVPtGlWe/hERldMrnNFpJaCoXq1atYvjw4ezZ\nswc/Pz/uv/9+atasiRBCK4lKgjuK4gmUN6Yd+BYVDfZ5TwpVKm7uxAaQ8Wv42qcwCeiUe8Pw960c\nhjIbRb+gm4CKm0tPoylKYmIi48ePZ968eQA0adKEd999l5o19a+4suGOjaKXlHKClPJq4/UccJun\nBSsrbH+OwSZU3onJA0OJjqgcI5gjXKjFlzprqNFUMKSUzJs3j+bNmzNv3jx8fX2ZNGkSO3bs4JZb\nnGY71lRw3FEULzo590JZC3KpHDiQxKZNJ52mOE1bN5v/mH4CwFfkUqda5diIngc0LHZOopecNJWH\n+fPnk5SURI8ePdixYweTJ0/G379y2QY1hbjsOYUQvYDeQB0hxHSHqlDUMlSFYMaM9bzzzkZiY8O5\n554WPPLINTRrVh1WT2TDxjOc9FUpS2NrVZ6IsD0djt9AB/nTVHwyMzNJSUkhOjoaIQTvvvsuGzdu\nZMiQIXpPRBWgpCH2GVRkiGxgt8P5NOA5TwrlLna75JtvVKrSo0eTmTZtLTdeX41mJ16C7bP5y285\nAFHBdsb2qxyud/cBfxrHvYGxXpRFo3GHJUuWMGrUKBo2bMjSpUsRQtCsWTOaNWvmbdE0ZYRLRSGl\n3ApsFUJ8JqXMLkeZSsZqhwwrBPmwf38ip0+nF1QFB/vSO2Q+bJ9NHhbiTK0B6NU+GLOTFKkVDRvw\nmUP5O28JotG4QXx8PKNHj+brr78GICQkhKSkJKpXL8ELUVMpccdGUUcI8aUQYocQ4u/8l8clc8Xx\nVIh9D5rOJXXIT3RuUxMfH/U2unath+XglwCcF7ULLulQCdxhsyiqtZMpGkJco6ko2Gw2Zs6cSYsW\nLfj6668JCgrijTfeYPPmzVpJVFHcse5+BLwMTEN5Oz2ENzfcWe1K6vM5XHc+hzW/DyS7aQSbNp3E\n33oKtqgQeac6fqgCIwFB/hU7XIcdcLSgtAQqX6hCzZWA3W7nxhtvZPXq1QDceeedzJgxg3r1nIT1\n11QZ3OlBA6WUvwJIKQ9JKV/Em+6xecXs6DUD8fe30LVrPTps6VRw+oTlakCFEa/oOHozNaOoQUij\nqUiYTCZ69uxJ3bp1+f7771m0aJFWElcA7vSiOUIIE3BICDFcCHEH4D3LsADy7Q0mAdUD1PHO/yts\n0/oRjpxTeyf8fSq2bcJRup7APm8JotE4QUrJV199xTffFGY/mTBhAnv27KFv375elExTnriz9DQG\nFUXiKWAqalXk4RKv8CStqsP6EXAuW73Mhq777REA7Ah2N51F4jplf69TreLuPhhXrPyrV6TQaJxz\n6NAhRo4cyW+//UZUVBQ9evQgIiICPz8//Py0Be1KolRFIaVcbxymAUMBhBB1PClUqZhNEBWoXgDn\nDxRU7en2FzMXZxSUK2oe7Nkoo08+3o2yqNEUkpOTw+uvv87UqVPJzs4mIiKCqVOnEhamLWdXKiUq\nCiHEtUAd4C8pZaIQohUwAegBxJSDfC6RUhZu5DFmEwCrz7cBcqkWYuLaxr40q+PjHQFL4FtgpEM5\n2VVDjaacWb58OSNGjGDfPrUIOnToUKZNm0aNGjrzyZVMSTuz/wfcDWwHXhRC/ITq314Fhru6rjzI\nzs6jUaOZXHttbbp0qcs400pVEdWWfN0RW8PM3Z0r3m7s31Afaj6n0R5OmoqBzWZj5MiR7Nu3j2bN\nmjF79mxuuukmb4ulqQCUNKPoB7SVUmYJISKBE0BrKeXh8hHNNQcOJHHyZBrff7+f77/fzzhjDUfe\n8h5Ja20AXNu4Yq6h9nI43o6OBqvxLna7nezsbAIDAzGbzcyePZuVK1cyfvx4bYfQFFCS11O2lDIL\nQEp5Dvi7IigJgD17zhYcN41KLDj+6mArDicoRWGpgDbsAQ7HnwFtvCWIRgPs3LmTbt268eSTTxac\nu/HGG5k4caJWEpoilDSjaCiE+NY4Fqh82fllpJT9PSqZK85m8vfCQifSJY/MLzhevie34LhhzYoT\nKTY/8qujwXqwl2TRaDIyMpgyZQrTp08nLy+PI0eOcP78eSIiIrwtmqaCUlJvenex8ixPCuI2J9MZ\n/udJuoSGcqB/YxpWM0zBrR4i7IyJc+l2JtwVQkhAxdloN5OiSiLXVUONxsP8+OOPPPHEExw/fhwh\nBCNHjmTq1KmEh4eXfrHmiqWkoIC/l6cgF0OUyUQPXxM9+taB/MWwG14BFZuMiOCKoyTOAKMdylbc\n27yi0ZQleXl5DBw4kG+/VYsC7dq147333qNjx45elkxTGag4PeqlcLh9weG2hHDOpavwHj7mirEb\n20pRY/VvaCWh8Q4Wi4WwsDCCg4N588032bhxo1YSGrfxqKIQQvQWQuwXQhwUQjjNYSGE+KcQYo8Q\nYrcQ4vNSb1o9EAY2h36hBadk1DW8+0thuPFAv4qhKBy3+t0P3OotQTRXJOvXr2f9+vUF5ddff529\ne/cyevRoLBY9ZNG4j9uKQghxUW4QQggz8A4qgGBL4F4hRMtibZoA/wK6SClbUXSVxjl1gmHWLTAu\noODU0Z5ryc+EOrxXMJYKMKM46HBcF/jYW4JorjiSk5MZMWIEnTt35qGHHiI3V1nFqlWrRkyMV/fJ\naioppSoKIURHIcRO4IBRbiuEeNuNe3cEDkopD0spc4EvUXszHHkUeEdKeR5ASnnGLamlhJ/+qY5D\n6rHvpK2gqk2s93diS6CJQ/mYtwTRXFFIKfn8889p3rw5c+bMwWw207dvX2w2W+kXazQl4M6MYiZw\nO5AEIKXcDrizXbMOapNePnHGOUeaAk2FEKuFEOuEEL1Lu6nVamff5u2FJ7pMITFV2SZqhZsqhH3C\n0V1sDkUjxGo0nuDAgQP07NmTIUOGkJCQQJcuXdi6dSuvvPIKAQEBpd9AoykBdxSFSUpZfFBcVkMU\nC2rw3R24F5grhLjAT08I8ZgQYpMQYtOxY2f5ZuJTBXUvL2pAerZSFLE1vL/uuhRYZBwHAI97URbN\nlYHVaqVHjx4sW7aMyMhIPvjgA1auXMlVV13lbdE0VQR3etYTQoiOgDTsDk8C7qRCjUctz+cTY5xz\nJA5YL6W0AkeMFKtNgI2OjaSU7wPvA9So0US+cMsqAPadqUZgTR+2HLYCUC/K+4qip8Pxaa9JobkS\nyA+M6ePjw9SpU/nzzz957bXXiIqK8rZomiqGOzOKEcBYoB6QAHQyzpXGRqCJEKKBEMIXGAT8UKzN\nd6jZBEKI6qilqBLDhFithZOZF5bcTI1awQXletW9G7cj1eH4fSDUVUON5jJISEhg6NChvPzyywXn\n7r//fubNm6eVhMYjuKMo8qSUg6SU1Y3XICllYmkXSSnzgCdQ+Xj2AguklLuFEFOEEPmpsX4FkoQQ\ne4A/gXFSyqSS7huUk1lwvGRfY3zCC8MO1PWyomjscPyo16TQVFXsdjvvvfcezZs3Z/78+UyfPp20\ntDRvi6W5AnBnrWajEGI/8BXwrZTS7V+mlHIxsLjYuZccjiVqtjLW3XvWMucVHCckvcTP26xALhFB\nJgL9vLt/MD9UoQ4brilrtm/fzvDhw1m3bh0AvXv35p133iEkxHtZiTVXDqX2rFLKRsDLQHtgpxDi\nOyHEII9L5gofI1JSciNCQvw4kWR4PEV4V0l843C81mtSaKoaVquVZ599lvbt27Nu3Tqio6NZsGAB\nixcvpmHDht4WT3OF4FbvKqVcI6V8CrgGtRT/mUelKon8GUWOyrgV7K+cT71pyM4C7nEot/CWIJoq\nh8ViYevWrdjtdp588kn27t3LgAEDCrM7ajTlQKm9qxAiGLVRbhCqD/weuN7DcrkmyLBDXH8DALmG\n3mgS7T1F4ag1//CaFJqqwvHjx7HZbDRo0AAhBHPmzCElJYUOHTp4WzTNFYo7M4pdKE+n16SUjaWU\nz0gp15d2kcfI31B3ldJVu44r11hvbrR71/jbEvd2Imo0zrBarUybNo0WLVrw6KOPIo24NE2aNNFK\nQuNV3BmGN5RS2j0uibvkGrZ0f7Uvz2KGPBvEVPOex9NW46/3DDeays7atWsZPnw4O3bsACAyMpLM\nzEyCgoK8LJlGU4KiEEK8IaV8BvhGCCGL13stw53Bp18doVHnBtjt6h8pyL/8ZxRbUBb+fHTWOs3F\ncv78eZ577jnef/99ABo0aMA777zDbbfd5mXJNJpCSppRfGX8rRiZ7QzsdgFIxv17Jw+OqoO97jUA\nmLyw8tTJ4dgHaFT+ImgqMTk5ObRr147jx4/j4+PDuHHjeOGFFwgMDPS2aBpNEVzaKKSUG4zDFlLK\n3x1fVADHnvQcX4KrqR0LJkG5e4HkoRITATyPTm+quXj8/PwYNmwYN9xwA9u2bWPq1KlaSWgqJO4Y\nsx92cm5YWQviLvmrYDl5FnKDqwFgv2BhzPM4BjOfUv6P11RCsrOzmTRpEp9/Xpif6/nnn2f58uW0\nbNmyhCs1Gu9Sko1iIMo+20AI8a1DVQiQ7GnBXJE/cXiqYyzm4BBIhc7NfEu+qIxxTMbRGPBu4BBN\nZWDp0qWMHDmSgwcPUqNGDe666y4CAgJ0pjlNpaCkX+kGVA6KGFSmunzSKHT08Rqv39acx1NVF10z\nvHy76qccjg+U65M1lY3Tp08zduxYvvjiCwBatWrFnDlzdI4ITaXCpaKQUh4BjgDLyk8c90nzLVz8\nubpB+c0o8hyOvyu3p2oqGzabjffee4/nn3+elJQUAgICmDRpEmPGjMHXt3xnwBrN5VLS0tMKKeWN\nQojzqOyeBVWoeH6RHpfOFdnh5NUKghyICDJRO7L8ZhSfOhz3ddlKc6Vjs9l4++23SUlJoU+fPsya\nNYsGDRp4WyyN5pIoaekpf5Nx9fIQ5KKoHoTtnmbwWQqWcjYQ5GesC0GnONUUJS0tDZvNRnh4OL6+\nvsydO5eEhAT69++vYzNpKjUlucfm78auC5illDagM6qv9O52UWEmOUOJV56K4gyFLrFTy++xmgqO\nlJJvv/2WFi1a8MwzzxSc79q1K3fffbdWEppKjzvusd+h0qA2AuahUpV+XvIlHsZk4WyKUhSJqeUX\nXeQFh+NR5fZUTUXm6NGj9O3bl7vvvpv4+Hh27dpFdna2t8XSaMoUdxSF3chp3R94W0o5BqjjWbFK\n5tCRVMZPUDb2trHlZxj8wPh7NW7GZ9dUWaxWK6+++iotW7bkp59+IjQ0lFmzZrFmzRr8/f29LZ5G\nU6a448SdJ4QYAAwF7jTO+ZTQ3uPkWiGolsoNHOhXPtP6dIfjd1y20lwJZGZm0qlTJ3bu3AnAoEGD\nmD59OtHR0V6WTKPxDO4oioeBkagw44eFEA2ALzwrVsmYTXaCIoIByMotn23ZPzocdy6XJ2oqKoGB\ngXTo0IHMzEzeffddevbs6W2RNBqPUqqikFLuEkI8BTQWQjQHDkopvWrLrR+Rgl+mWnIqr4RF+ZFh\nm5bL0zQVCSkln3zyCY0aNaJr164AvPnmm/j6+uqNc5orAncy3HVDbR+IR3mE1hJCDJVSrva0cK4w\nJcQQ0lht46gW4nlrwQ6HYx3X6cpi7969jBgxghUrVtCiRQu2bduGr68vYWFh3hZNoyk33BmOvwn0\nkVLuARBCtEApDi+m3Co0Fjao6fkZRVuH44Eef5qmIpCVlcXUqVN57bXXsFqtREVF8a9//QsfH6+a\n5zQar+BOL+ubryQApJR7hRBejUGw369QR3k6YZFjLKf/efRJmorCL7/8wqhRozh8+DAAjz76KK+8\n8gqRkd4LRqDReBN3FMUWIcQcYL5RHoKXgwIm1laWgqhQEyYPb2ZytEk859EnaSoC6enpDB06lMTE\nRK666irmzJlDly5dvC2WRuNV3FEUw1EBU8cb5VUUjbRd7viFC0gDX4tnlYSjP5VWElUXm82G3W7H\nx8eH4OBgZsyYQVxcHGPGjNFLTRoNpSgKIURrVIbPRVLK18pHpNKx2VQM1/o1PBu/4wmH43979Eka\nb7F582Yef/xx+vXrx8SJEwEYPFhnP9doHHHpMiSEeB4VvmMIsFQI4SzTnVdIS1eJR80eTJQtgXeN\n4wBAB4auWqSmpvL000/TsWNHNm/ezKefforVai39Qo3mCqQk39IhQBsp5QDgWmBE+YhUOn8ldwTA\n7EHP2A8djo957jGacoAcEcMAACAASURBVEZKycKFC2nevDkzZ85ECMHYsWPZsmWLXmbSaFxQ0tJT\njpQyA0BKeVYIUWHCG6UHxAKQ7cFd2Y84HEd57Cma8iQtLY2BAweyZMkSAK677jrmzJlDu3btvCyZ\nRlOxKUlRNHTIlS2ARo65s6WU/T0qWQnk+kQA0DzGMyPA5Q7HizzyBI03CA4OJicnh7CwMF555RUe\ne+wxTKYKM/7RaCosJSmKu4uVZ3lSkIvBz5ZFniXUI+E7JIUZm6AwCqKmcrJy5Uqio6Np0qQJQgg+\n/PBD/P39qVmzprdF02gqDSXlzP69PAW5GCxCie0J99ijDse/lfndNeVFYmIi48ePZ968edx8880s\nXboUIQT169f3tmgaTaWjUs677Ya5xBNOT5ONvw2AW8v+9hoPY7fb+fDDD2nWrBnz5s3D19eXbt26\nYbPZvC2aRlNp8aiiEEL0FkLsF0IcFEK43LMmhLhbCCGFEG7Fj7ILtX/CE15Pnxh/z5X9rTUeZvfu\n3XTv3p1hw4Zx7tw5br75Znbu3MmkSZOwWMonyrBGUxVx+79HCOEnpcy5iPZmVI6fW4E4YKMQ4gfH\nuFFGuxDgaWC9u/fOsIQCYCrjKcUyh+M/yvTOGk+TkpJCp06dSE9Pp0aNGkyfPp3BgwfrfNUaTRlQ\n6phcCNFRCLETIz6eEKKtEMKdEB4dUbkrDkspc4EvgX5O2v0HeBVwK9FwnkNyPb8yHiSOcTi+pmxv\nrfEQUioX6bCwMCZMmMDw4cPZt28fQ4YM0UpCoykj3OlqZwK3o3ZpI6XcLoS4qeRLAJVX+4RDOQ64\nzrGBEOIaoK6U8mchxDhXNxJCPAY8BtAiRuUBMJvKdkaRAuwyjt15c1cKVquVuLg4srPd0uPlRl5e\nHufPnycgIIDgYJXt8O67laPe6dOnOX36tDfF02i8hr+/PzExMWW6gdQdRWGSUh4rNjq7bMugsYFv\nOvBgaW2llP/f3rnH51j/f/z52RyXw0S0sDGbne97DpvhuxZq880hIof0dUgiJEJUlNK3KKnkFCmR\nr4mcfpJQU4SMGmaEbJjjnMbGZof37497u9z3jvdmR67n43E97uvwuT6f9/25Du/rc3p9FgALADwa\nPigAlVXq3ZpggZ/Z+upcQ91/xMbGUr16dRo1alQmvtBFhIsXL3LmzBns7OyoXLky7u7uZcI2HZ3S\nRkS4fPkysbGxNG7cuMjitcZRnFZK+QOS0e7wMnDUivPOAA3Nthtk7MukOuANbMt4yB8G1iuluorI\n3twiTVMmL1nxdqIVJlhP5rwTAYB9kcZcvklKSiozTiIxMZGTJ09y8+ZNAOzt7XF0dCwTtunolAWU\nUtSuXZu4uLgijdcaR/ESpuonR+ACpjZfa3SfwgFXpVRjTA6iD3emnkZE4oE6mdtKqW3AuLycBEA6\nppdCuk3RNVBEmq3rYyeyU9ov4rS0NM6cOcPFixcBqFSpEo6Ojtjb6y5dRycrxfG85vu2FZGLmF7y\nBUJEUpVSI4GfAFvgKxE5pJR6F9grIusLbC2QmQVVU63ugJUnqYCP2Xb1IolVpyhRSnH9+nUAHn74\nYRwcHLC1LV6JeR0dnTtY0+tpoVJqQdbFmshFZKOINBWRJiLy34x9b+XkJETksfxKEwAJmHSePB6q\nao0J+fKT2fqcIolRpyhISkoiNdXUDmVjY0Pjxo3x9PSkQYMGOTqJ9evXM23atJI2s8yxbds2atas\nia+vL+7u7owbN87i+Nq1azEYDHh4eODj48PatWstjs+YMQN3d3d8fX3x8/NjyZIllDU+/fTTMmlX\nJsnJyfTu3RsXFxdatWpFTExMjuE+++wzvL298fLy4tNPP9X29+7dG19fX3x9fWnUqJEmWnnw4EEG\nDhxYAv8gO9bU35gPL6gCdMeyN1MJYypT1K1ZNDNEdM74rQwML5IY73EeyiL5FTcy53BLImHstjvb\n//GEme3zjT49PZ3z589z7tw5ateuTaNGjQB44IEH8jyva9eudO3aNd/4wdTgJyKlJgiYmpparAMA\nAwMD2bBhA7du3aJZs2Z0796dtm3bsn//fsaNG8eWLVto3Lgx0dHRPPHEEzg7O2MwGJg/fz5btmxh\nz5491KhRg+vXr7NmTdHKYqalpd1VaTA1NZWvvvqKP//8s0DnlOSAy0WLFlGrVi2OHz9OaGgoEyZM\nYMWKFRZhIiMjWbhwIXv27KFSpUp07NiRzp074+LiYhF27Nix1Kxp6unp4+NDbGwsp06dwtHRscT+\nD1hRohCRFWbLN8DTQIviNy1vjLXvXmL8dbP1sXcdm87dcuPGDaKiojh79qz2Mo+Ojsbd3Z2BAwfS\ntGlT+vXrx9atW2nbti2urq7s2bMHgMWLFzNypMlpXbhwge7du2M0GjEajezcuZOYmBjc3Nzo378/\n3t7enD59muXLl+Pj44O3tzcTJkzI0aaYmBgCAwNp3rw5zZs3Z+fOnQD06dOHH374QQs3cOBAVq1a\nRVpaGuPHj8fPzw+DwcAXX3wBmL70AwMD6dq1K56engB069aNFi1a4OXlxYIFdwrpixYtomnTpvj7\n+zNkyBDtf8XFxdGjRw/8/Pzw8/Pj999/zzM/q1atiq+vL2fOmPqQzJgxgzfeeEPrDdO4cWNef/11\nPvroIwDef/995s2bR40apgGtNWrUYMCAAdniPX78OI8//jhGo5HmzZvzzz//sG3bNjp37qyFGTly\nJIsXLwagUaNGTJgwgebNm/PRRx/h7+9vkb8+PqbK33379hEUFESLFi0ICQnh3Llz2dL+5ZdfaN68\nufbiX7hwIX5+fhiNRnr06KF1dBg4cCDDhg2jVatWvPbaayQmJvL888/j7+9Ps2bNWLduXZ7X925Y\nt26dlm89e/bk559/1sb7ZHL48GFatWqFnZ0dFSpUICgoiNWrLftbigjfffcdffv21fZ16dKF0NDQ\nu7axwGQ+kNYumKZG/aeg5xXV8nBDD3lhzmW5cDhe7oYZWSLWyZmoqCjLHXU+t1xy45uDluHG/Jxr\n0Nu3b8uJEyckPDxcwsPD5eDBgxIfb7q+0dHRYmtrKwcOHJC0tDRp3ry5DBo0SNLT02Xt2rXy1FNP\niYjI119/LSNGjBARkV69esknn3wiIiKpqaly7do1iY6OFqWU7Nq1S0REzpw5Iw0bNpSLFy9KSkqK\ntGvXTtasWZPNtsTERLl165aIiBw9elRatGghIiKrV6+W/v37i4hIcnKyNGjQQG7evClffPGFTJ06\nVUREkpKSpEWLFnLixAkJCwsTOzs7OXHihBb35cuXRUTk5s2b4uXlJZcuXZIzZ86Ik5OTXL58WW7f\nvi3/+te/tP/Vt29f2b59u4iInDx5Utzd3bPZGxYWJp06dRIRkStXrkjz5s3l3LlzIiLSrFkziYiI\nsAgfEREhzZo1k/j4eLG3t8/1Gpnj7+8vq1evFhGRW7duSWJiokW6IiIjRoyQr7/+WkREnJycZPr0\n6doxo9Go5cO0adNk6tSpcvv2bWndurVcvHhRRERCQ0Nl0KBB2dJ+6623ZNasWdr2pUuXtPU333xT\nOzZgwADp1KmTpKamiojI66+/LkuXLhURkatXr4qrq6skJCTken2z8q9//UuMRmO2ZcuWLdnCenl5\nyenTp7VtZ2dniYuLswgTFRUlrq6ucunSJUlMTJSAgAAZOXKkRZhff/01mz07duyQzp0752hj1viz\ngqltuFDv3XzLY0qpq5jUt8FUArkC5KrbVNykKlOVk3LIuyoiL9IB85rbou1IplMQUlJSOHToEKmp\nqSilcHBw4OGHH7aoFmrcuLH21enl5UWHDh1QSuHj45Nj/e8vv/yi1WHb2tpSs2ZNrl69ipOTEwEB\nAQCEh4fz2GOP8dBDpmmp+vXrx2+//Ua3bpbC8ikpKYwcOZKIiAhsbW05etTUM/zf//43r7zyCsnJ\nyWzatIlHH32UqlWrsnnzZg4cOMCqVasAk7TIsWPHqFSpEv7+/hZ922fNmqVV7Zw+fZpjx45x/vx5\ngoKCePDBBwF45plntDS3bt1KVNQdBZzr16+TkJCgDTjMZPv27RiNRo4dO8bo0aN5+OGHC3JJ8uTG\njRucOXOG7t27A6bBXdbQu3dvbb1Xr16sWLGCiRMnsmLFClasWMHff/9NZGQkTzxhkuJMS0vDwcEh\nWzznzp3Dw8ND246MjGTSpElcu3aNhIQEQkJCtGPPPPOMVs21efNm1q9fz4wZMwBTG9ipU6d45JFH\ncry+Wdm+fbtV/9NaPDw8mDBhAsHBwTzwwAP4+vpmq5Jbvny5RWkCoG7dupw9e7ZIbbGGPB2FMvWz\nMnJn/EN6hmcqdSpXLHwXMPOJNk5h1kdXJ39ya5PISn9v05IPFStWxN7entu3b+Po6Jjji6dy5cra\nuo2NjbZtY2OjNXhbQ37tHABr1qzhnXfeAeDLL79kw4YN1KtXj/3795Oenq7ZV6VKFR577DF++ukn\nVqxYQZ8+po6BIsLnn39u8cICU9WTefrbtm1j69at7Nq1Czs7Ox577LF8R7+np6eze/fufF/OmW0U\n0dHRBAQE0KtXL3x9ffH09GTfvn0YjUYt7L59+/Dy8qJGjRpUq1aNEydO4OzsnG8+ZaVChQqkp6dr\n21n/i/l/7927N8888wxPP/00SilcXV05ePAgXl5e7Nq1K890qlatahH3wIEDWbt2LUajkcWLF7Nt\n27Yc0xQRvv/+e9zc3CzimzJlSo7XNyuBgYHcuHEj2/4ZM2bw+OOPW+yrX78+p0+fpkGDBqSmphIf\nH0/t2rWznTt48GAGDx4MwBtvvEGDBg20Y6mpqaxevZp9+/ZZnJOUlETVqkXTkacg5NlGkeEUNopI\nWsZSJpwEgEpPKfS5mTW7LbAcEahT/KSlpREbG2vx0Dk6OuLq6mr112l+dOjQgXnz5mnpxcfHZwvj\n7+/Pr7/+yqVLl0hLS2P58uUEBQXRvXt3IiIiiIiIoGXLlsTHx+Pg4ICNjQ1Lly61kCvv3bs3X3/9\nNdu3b6djx44AhISEMG/ePFJSTPfn0aNHSUzMPjg0Pj6eWrVqYWdnx5EjR9i9ezcAfn5+/Prrr1y9\nepXU1FS+//577Zzg4GA+//yOzFpERESe+dC4cWMmTpzI9OnTARg3bhwffPCBVgqLiYnh/fffZ+xY\nUwvd66+/zogRI7SuyAkJCdl6F1WvXp0GDRpovaWSk5O5efMmTk5OREVFkZyczLVr1/j559yns2nS\npAm2trZMnTpVK2m4ubkRFxenOYrMkmZWPDw8OH78uLZ948YNHBwcSElJYdmyZbmmGRISwueff661\nFfz1118AeV5fc7Zv367dF+ZLVicBpo4V33zzDQCrVq2iffv2OY5tyBwXdOrUKVavXs2zz2rDzNi6\ndSvu7u4WzgNM95O3d/4fYEWNNd0+IpRSzYrdkgLy48bj+QfKgfPcqWrK/bbSKQ6uXbvGoUOHOH/+\nPKdOndIeWhsbmyIdJPTZZ58RFhaGj48PLVq0sKiuycTBwYFp06bRrl07jEYjLVq04KmnsmtWDh8+\nnG+++Qaj0ciRI0csvlKDg4P59ddfefzxx6lUyVQl+sILL+Dp6Unz5s3x9vZm6NChOZZ6OnbsSGpq\nKh4eHkycOFGrEqtfvz5vvPEG/v7+tG3blkaNGmm9XmbNmsXevXsxGAx4enoyf/78fPNi2LBh/Pbb\nb8TExODr68v06dPp0qUL7u7udOnShQ8//FDrfvnSSy/Rrl07/Pz88Pb2JjAwMMeeYUuXLmXWrFkY\nDAbatGnD+fPnadiwIb169cLb25tevXrRrFner4zevXvz7bff0qtXL8A0iHLVqlVMmDABo9GIr69v\njg3L//73v/ntt9+07alTp9KqVSvatm2Lu7t7rulNnjyZlJQUDAYDXl5eTJ48Gcj7+haWwYMHc/ny\nZVxcXJg5c6bWbfvs2bM8+eSTWrgePXrg6elJly5dmDNnjsUA0tDQ0GzVTgBhYWF06tTprm0sKCq3\nQoJSqoKYBs0dAtyAf4BETP1TRURKRWD1ISdf6TbhFzrWO0+PHp4FOjcd08i/TFIogM76fcrhw4ct\n6oQLw+3btzl16hTXrl0DwM7ODicnpyJ5KO9FMtsdUlNT6d69O88//7zWJqAD3bt358MPP8TV1bW0\nTSlRkpOTCQoKYseOHfl2983puVVK7RMRq+b8yUpeqe3BpLZtXef0EuSBa5HYODxU4PPMC9GfoDuJ\n4kZEuHDhAmfPniU9PR0bGxvq169P3bp1S10WpCwzZcoUtm7dSlJSEsHBwdka2O93pk2bxrlz5+47\nR3Hq1CmmTZtWKpNw5ZWiAhCRf0rIFqt5IOk8dvE1C3zeILP10UVnjk4upKWlcf78edLT06lVqxYN\nGzbUqmh0ciezZ45Ozri5uWVrlL4fcHV1LTXnmJejeEgp9WpuB0VkZjHYYxX2VR8mpFWD/AOacdVs\nfWHRmqNjRmpqKjY2NtjY2FChQgWcnJxQSukCfjo65Zi8HIUtUI07OnxlhsY3jgJeBTrnHbP1F4rU\nGh0wVTNduXKF06dPU7duXR555BEAatWqVcqW6ejo3C15OYpzIvJuiVlSAGxtCz7bWuZ8E02K1hQd\nTH27T548qXV5TUhIQET0dggdnXuEfNsoyiK2jWpCo4K1UWzM+NU1nYoOcwE/EaFChQo0aNCA2rVr\n605CR+ceIq9xFB1KzIoCcuMBB6hqfcv/ZbP1NkVvzn1J5oCoTAG/2rVr4+XlRZ06dXQnUYawtbXF\n19cXb29vunTponVRBjh06BDt27fHzc0NV1dXpk6daiFe9+OPP9KyZUs8PT1p1qyZNjCvLPHXX39p\no5vLKh988AEuLi64ubnx008/5RgmU+zQ29ubAQMGZBt7Ex4eToUKFTRpmLi4OG2QZ0mQq6MQkSsl\nZkUBeahS9pG2eRFgtm4oWlPuO5R6B6XeoVKl9zEYVlOlShXc3Nxo3LixxWTuCxbs08Iq9Q4vvvh/\npWh13uQ2GvdeSL9q1apEREQQGRnJgw8+yJw5pllXbt26RdeuXZk4cSJ///03+/fvZ+fOncydOxcw\naSiNHDmSb7/9lqioKPbu3YuLi0uR2lYQ+ZXceP/99xk1alSJplkQoqKiCA0N5dChQ2zatInhw4dn\nu97p6ekMGDCA0NBQIiMjcXJy0kZ2g+n+yNSFyuShhx7CwcEhXwXhoqJ0BPnvkujjcZw4cTX/gJhG\nYWeO4e5BGa5PK+OISI7z8Hp6elK9evHNCxgTE2OVzPiePXto3bo1zZo1o02bNvz999+A6SEbN24c\n3t7eGAwGTQLDXPp65cqVREREEBAQgMFgoHv37ly9mvP9lZM0+Pz58xk/frwWxlzy/Ntvv8Xf3x9f\nX1+GDh2qvSSqVavG2LFjMRqN7Nq1i3fffVcbEf3iiy9qX/bh4eEYDAZ8fX0ZP368Jt+Qm5x5XrRu\n3VqTHP/f//5H27ZttZePnZ0ds2fP1kYRf/jhh7z55pvaaGdbW1teein7DMgJCQkMGjQIHx8fDAaD\nJjliLlS4atUqbcKdrPLfjRo1sijluLq6cuHCBask1W/cuMGBAwc07arc7oHFixfTtWtX2rdvT4cO\npoqSjz76SMu7t99+W4szN+n3wrJu3Tr69OlD5cqVady4MS4uLto9m8nly5epVKkSTZs2BeCJJ56w\nkG75/PPP6dGjB3Xr1rU4r1u3bnnKlhQphZWdLa2ljqNRxr34X/n115i8VHbvSOuaLbesOkPHnKio\nKElMTJSoqCgJDw8XmGKx5MYXX+y1CDdkyPpCpW+tzHh8fLykpKSIiMiWLVvk6aefFhGRuXPnSo8e\nPbRjmdLeWaWvfXx8ZNu2bSIiMnnyZHnllVdytCcnafCLFy9KkyZNtDAdO3aU7du3S1RUlHTu3Flu\n374tIiIvvfSSfPPNNyIiAsiKFSuyxSsi8txzz8n69ab88vLykp07d4qIyIQJE8TLy0tEJFc586w8\n8MADImKSW+/Zs6f8+OOPIiIyZswY+fTTT7OFt7e3l/j4+BwlyXPitddes8irK1euWKQrIrJy5UoZ\nMGCAiGSX/x41apR89dVXIiKye/du6dChg4hYJ6n+yy+/aNdZJPd74Ouvv5b69etrefzTTz/JkCFD\nJD09XdLS0qRTp07y66+/ikjO1zcro0ePzlFy/IMPPsgWdsSIEZq8uYjI888/LytXrrQIk56eLo6O\njhIeHq7libe3t4iIxMbGyqOPPippaWkyYMAAi3NjY2O1cFkpcZnxskh6usLGJv+yQbjZ+huYpufT\nsZ6EhASuXr2qidqZVy2VJNbIjMfHxzNgwACOHTuGUkoT5du6dSvDhg3TRrNmynfDHenr+Ph4rl27\nRlBQEAADBgzgmWeeydGWnKTBAwICcHZ2Zvfu3bi6unLkyBHatm3LnDlz2LdvH35+foCpuifzq9DW\n1pYePe7oGIeFhfHhhx9y8+ZNrly5gpeXl6ZY2rp1awCeffZZNmzYAJCrnLm5jHlmmpmTF3l4eGgy\n3kXF1q1bLSbSsaY7tLn8d+/evXn33XcZNGgQoaGh2jWxRlL93Llzmkw85H4PgOkrPfPab968mc2b\nN2t6VAkJCRw7doxHH300x+ubVfn1k08+sS5zrEQpRWhoKGPGjCE5OZng4GAtf0aPHs306dNz1Nwq\nScnx8ukoBGxS0vMMkwr4m23/t1gtuvdYu3YtL7/8MgsXLqROnTrUrVuX+vXrI2LM/2TgxRdb8OKL\nRTMRojUy45MnT6Zdu3asWbOGmJgYHnvssXzjzU9r6vTp03Tp0gUwieu5u7vnKg3ep08fvvvuO9zd\n3enevTtKKUSEAQMG8MEHH2SLu0qVKtrLICkpieHDh7N3714aNmzIlClT8pUcl1zkzLOS2UZx8+ZN\nQkJCmDNnDqNGjcLT09NCXA/gxIkTVKtWjRo1auDl5ZVNkrwgmHdoyEtyvHXr1hw/fpy4uDjWrl3L\npEmTAOsk1bNKjud1D2SVHH/99dcZOnSoRXzWSr+PGTOGsLCwbPv79OnDxImWU/VkSo5nEhsbS/36\n9bOd27p1a23Oi82bN2vzYuzdu1eTsL906RIbN26kQoUKdOvWrUQlx8tlG4WnjS2OFfI2/Qez9bLd\nJ6LscebMGfr06UNsbCyVKlXCw8MDR0fHu5rruLiJj4/XHsDMKTjB9CX5xRdfaA7lypXsfTRq1qxJ\nrVq1tAd16dKlBAUF0bBhQ01OetiwYblKg4NJqG7dunUsX75ce7A7dOjAqlWrNDnpK1eucPLkyWzp\nZ76M6tSpQ0JCglZKsLe3p3r16vzxxx8AFl/u1sqZZ2JnZ8esWbP4+OOPSU1NpV+/fuzYsYOtW7cC\nppLHqFGjeO211wAYP34877//vvbCSk9Pz1Gt9oknntAayAGtbadevXocPnyY9PT0POfdVkrRvXt3\nXn31VTw8PLSvd2sk1bNKjud2D2QlJCSEr776ioSEBMB0v1+8eDHP62vOJ598kqPkeFYnASbJ8dDQ\nUJKTk4mOjubYsWMWU8FmknmPJCcnM336dIYNGwZAdHQ0MTExxMTE0LNnT+bOnatpf5Wk5Hi5dBTu\nNrY0eDjvBlTzJp78m/l0UlJStAbU+vXr89///pdZs2bx8MMPlwuV19dee43XX3+dZs2aWfRseeGF\nF3B0dMRgMGA0Gvnf//6X4/nffPMN48ePx2AwEBERwVtvvZUtTG7S4GCqcvHw8ODkyZPai8DT05P3\n3nuP4OBgDAYDTzzxRI7zQNvb2zNkyBC8vb0JCQnRqqrANH/2kCFD8PX1JTExUZMct1bO3JxmzZph\nMBhYvnw5VatWZd26dbz33nu4ubnh4+ODn5+f1ghvMBj49NNP6du3Lx4eHnh7e3PixIlscU6aNImr\nV6/i7e2N0WjUvrSnTZtG586dadOmTY4z1ZmTKTluPgueNZLq7u7uxMfHawM9c7sHshIcHMyzzz5L\n69at8fHxoWfPnty4cSPP61tYvLy86NWrF56ennTs2JE5c+ZoH1xPPvmkVnX00Ucf4eHhgcFgoEuX\nLrRv3z7fuEtUcrywjRultdRxNMpvr0wVOXolx0YcreEmY3k6z1A6IiK///67+Pj4yJIlS7Idy6lR\nTKfkuHHjhrb+wQcfyKhRo0rRmrLHzJkzZeHChaVtRqkQGBiodR7ISlE3ZpfLEoVNpVpQOfdqEPPJ\nFPsVvznllitXrjB06FDatm3LwYMHmTt3rlaq0Ckb/PDDD9qAue3bt2t1+DomXnrpJYs2rPuFuLg4\nXn311RLTUst14qKyykNOvrL2i//StmPuRa423HEWaZTT+rViRET49ttvGTt2LHFxcVSsWJHXXnuN\nN998M1vjWFFMXKSjo1OylOTERWWWvCQiErnjJJ5HdxJZuXDhAn379tXqkoOCgpg3b57uDHR0dHKl\nfL5H8xhCUc1s/bNiN6T8YW9vz7lz56hTpw6LFy8mLCxMdxI6Ojp5Ui5LFMuXR1LdoQU+PvUs9t8y\nW3fD0mncz2zZsoXmzZtTu3ZtKleuzMqVK3FwcMg2kEhHR0cnJ8pliSI5OY309OxtK3Zm6wdLzpwy\ny7lz5+jbty/BwcFMmDBB2+/t7a07CR0dHaspl45CJD1bO4W522gAlI7YRNkgLS2NuXPn4u7uTmho\nKFWrVsXNza3c9mi616Wyc6Nv374YDAarJSPM5S2KEhFh1KhRuLi4YDAY+PPPP3MMd+vWLYKCgkpd\njTcvNm3ahJubGy4uLpoAYlZOnTpFu3bttHEnGzdu1I4dOHCA1q1b4+XlhY+PjzZY8vHHH89VSPKe\noLD9aktrqeNolBd6vycHwmIs+ghvNQuUmmPP4vuDffv2iZ+fn2DyndKpUyeJjo4udHxlYRyFucBc\n//795b333hMRk3Cbs7Oz/PTTTyIikpiYKB07dpTZs2eLiMjBgwfF2dlZDh8+LCImYby5c+cWqW2Z\nInRFzblz5yyEZ6zqNwAAHv5JREFUBq3BPJ+Kkh9++EE6duwo6enpsmvXLvH3988x3OzZs3MUGsyN\nTFG+kiI1NVWcnZ3ln3/+keTkZDEYDHLo0KFs4YYMGaLdJ4cOHRInJycRMV1rHx8fTSzx0qVLmrjh\n4sWLtfuyLKCPowD6V6qMxyOWI7O3ma2XXaGJ4iUmJgZ/f3/Cw8OpX78+33//Pf/3f/9Ho0aNiiR+\nVUxLQbjXpLKTkpK0tJs1a6b1RgsODubMmTP4+vpq0iKZXLhwge7du2M0GjEajezcuTPb/+nQoQPN\nmzfHx8eHdevWAZCYmEinTp0wGo14e3uzYsUKACZOnIinpycGg4Fx48Zls3HdunX0798fpRQBAQFc\nu3YtxxHmy5Yt46mnnsrThpiYGNzc3Ojfvz/e3t6cPn2azZs307p1a5o3b84zzzyjSWvkJr1eWPbs\n2YOLiwvOzs5UqlSJPn36aHaZo5Ti+vXrgEkWJHP+982bN2sj/AFq166tjbLu2rUry5cvvyv7yjSF\n9TDWLEBH4G9MU0JMzOH4q0AUcAD4GXDKL846jkbZ03+GyD9XLb1lxtK3EN73XuKFF16QMWPGyPXr\n14skPvMvk+K6UfLjXpbKnjFjhgwaNEhERA4fPiwNGzaUW7duSXR0tCYpnpVevXrJJ598ouXJtWvX\nLOxNSUmR+Ph4ERGJi4uTJk2aSHp6uqxatUpeeOEFLZ5r167JpUuXpGnTppKeni4iIlevWj5XIiKd\nOnXS/oeISPv27TVJ7EySk5OlXr162nZuNkRHR4tSSnbt2qUdCwwMlISEBBERmTZtmrzzzjsikrv0\nujnffvttjpLfPXr0yBZ25cqVMnjwYG17yZIlMmLEiGzhzp49K97e3lK/fn2xt7eXvXv3iojIJ598\nIs8995wEBwdLs2bNLGTqRURcXFxylCUvDcqNzLhSyhaYAzwBxALhSqn1IhJlFuwvoKWI3FRKvQR8\nCPTOHlsWsnxYmNcMPnZXVpcvYmJiePnllxk3bpwmkb1gwYJim4q0tFo47mWp7B07dvDyyy8DJu0i\nJycnjh49So0aNXJN+5dffmHJkiWAqZSUqf+UiYjwxhtv8Ntvv2FjY8OZM2e4cOECPj4+jB07lgkT\nJtC5c2cCAwNJTU2lSpUqDB48mM6dO9O5c+d8/3tOXLp0CXt7+3xtAHByctJ0lHbv3k1UVBRt27YF\n4Pbt25qsek7S65lqvpn069ePfv2KVn9h+fLlDBw4kLFjx7Jr1y7+85//EBkZSWpqKjt27CA8PBw7\nOzs6dOhAixYttMmQMmW/78WOIsVZ9eQPHBeREyJyGwgFnjIPICJhInIzY3M3pnbofLndphHUuTOC\n+EezYy/ejcXlhJSUFKZPn46npycbNmywUK28F+erzpTKPnnyJCKiqZV6enqyb98+i7A5SWUXlsJK\nZT/99NPAHansTHXRM2fOFFuDsznLli0jLi6Offv2ERERQb169UhKSqJp06b8+eef+Pj4MGnSJN59\n910qVKjAnj176NmzJxs2bMhxHmZrpLKzSn7nZgNkl/x+4okntDyKiopi0aJFmvT6qlWrOHjwIEOG\nDMlR8nvZsmX4+vpmW3r27Fmo/wEmIcZevXoBpmublJTEpUuXaNCgAY8++ih16tTBzs6OJ5980qJh\nvyRlv0ua4nQU9YHTZtuxGftyYzCW73wNpdSLSqm9Sqm9AA96V4Ead/Rd3sn4vR8UX3bs2EGzZs2Y\nOHEit27dok+fPqxevbq0zSoR7kWp7MDAQG06y6NHj3Lq1Cnc3NzyzIcOHTowb948wNTDLT7ecg75\n+Ph46tatS8WKFQkLC9Okzc+ePYudnR3PPfcc48eP588//yQhIYH4+HiefPJJPvnkE/bv358tva5d\nu7JkyRJEhN27d1OzZs1sirC1atUiLS1Ne5nnZkNWAgIC+P333zW58MTERI4ePZqr9HpW+vXrl6Pk\nd07h/fz8OHbsGNHR0dy+fZvQ0FC6du2aLZyjoyM///wzYJLCSEpK4qGHHiIkJISDBw9y8+ZNUlNT\n+fXXX/H09ARMDu/8+fNF1h5Y5ihsnVV+C9AT+NJs+z/A7FzCPoepRFE5v3jrOBrl8I4ftHq3dLOD\nL1pdg1f+uHLligwePFjrzdSkSROtt09xUtZ6PYmIdO7cWVO6PXDggAQFBUnTpk2lSZMmMmXKFK2+\nXUTk//7v/6R58+bi7u4uHh4eMn78+Gzx37hxQ/r37y9eXl5iMBjk+++/FxFTnbazs7O0atVKRowY\nYdFGkXU6S9M0scjixYu1fXFxcdKrVy/x8fERDw8PGTp0aLa0b926JQMHDhRvb2/x9fWVX375RUQk\nzzaK8+fPS9euXcXb21uMRqM2VWpmPsXFxUlAQIB4e3vLwIEDxd3dXaKjo2XTpk3i4+MjRqNRWrZs\nKeHh4XL27Fnx8/MTHx8f8fb2trA/k/T0dBk+fLg4OzuLt7d3tvaJTJ5//nnZsmVLnjbk9L9+/vln\nadmypfj4+IiPj4+sW7dORETefPNNcXZ2ljZt2sjAgQPl7bffzjHdgvDDDz+Iq6urODs7W/RSmjx5\nspbuoUOHpE2bNmIwGMRoNFo8Z0uXLhVPT0/x8vKyuJfCw8MtpmUtbYq6jaI4HUVr4Cez7deB13MI\n9zhwGKhrTbx1HI2yeuE3Eh+fJCIic80Oxhc+X8s8ly5dkjp16kjFihVl8uTJcvPmzRJJtyw4Cp3y\nwb59++S5554rbTNKhVGjRsnWrVtL2wyNctOYjWnKalelVGPgDNAHeNY8gFKqGaZ5hTqKyEVrI/5+\n9WE8A29Qo0ZlZpvtz735r3xy5MgRGjduTOXKlalduzbLli3D0dFR6+6po1OWaN68Oe3atSMtLa1M\nz4ZYHHh7e2uN2vcixdZGISKpwEjgJ0wlhu9E5JBS6l2lVGbF4EeYJJlWKqUilFLrrYv7znpmn5Ls\nvb/LLzdv3uTNN9/EYDDw4YcfavuDg4N1J6FTpnn++efvOycBMGTIkNI2oVgpVlFAEdkIbMyy7y2z\n9ccLF69poNZ1s33jC2Vh2WPTpk0MHz6c6OhowNTtUEdHR6c0KZfqsc2rplL9+m1CzfbVLTVrioaz\nZ88yevRoVq5cCYCPjw/z58+nTZs2pWyZjo7O/U65dBTdpAYO9aoxNGP7kVK15u45evQoLVu25MaN\nG9jZ2TFlyhRGjx5NxYr3s7Shjo5OWaFcOgrSbSxGCZf39glXV1f8/Px44IEH+Pzzz3Fyciptk3R0\ndHQ0yqUooGDD3sp3TC9vo7GvX7/O6NGjtYFgSinWr1/P+vXrdSeRA7rMeOnKjB85coTWrVtTuXJl\nZsyYkWs4EaF9+/aaoF5ZZN++ffj4+ODi4sKoUaMs7pVMrl69Svfu3TEYDPj7+xMZGQmYRl77+/tj\nNBrx8vLi7bff1s7p06cPx44dK7H/UeIUtl9taS11HI1y6q8wbfyETcG6F5cq6enp8t1334mDg4MA\nEhISUtom5UtZGEehy4xbR3HJjF+4cEH27Nkjb7zxhnz00Ue5htuwYYOMHj26QHFnCiuWFH5+frJr\n1y5JT0+Xjh07ysaNG7OFGTdunEyZMkVETEKN7du3FxHT83vjxg0REbl9+7b4+/tr4obbtm2zEFws\nbXSZcUxf4Msy1v9dqpZYz4kTJ+jUqRO9evXi3LlzBAQEMH369NI2q2B8rIpnKQC6zHjJy4zXrVsX\nPz+/fNvMzGXGAbp160aLFi3w8vJiwYIF2v5q1aoxduxYjEYju3btYt++fQQFBdGiRQtCQkI0CfOF\nCxfi5+eH0WikR48e3Lx5M1uaBeHcuXNcv36dgIAAlFL079+ftWvXZgsXFRVF+/btAZNQY0xMDBcu\nXEAppd0TKSkppKSkaHpggYGBbN26ldTU1LuysaxSPtsolA2Zhby8VXFKn9u3bzNjxgymTp1KUlIS\n9vb2TJs2jSFDhmBjUy79dKmRlpbGzz//zODBgwFTtVOLFi0swjRp0oSEhASuX79OZGSkVVVNU6dO\npWbNmhw8aJpA15qZymJjY9m5cye2trakpaWxZs0aBg0axB9//IGTkxP16tXj2WefZcyYMfzrX//i\n1KlThISEcPjwYYt45syZg1KKgwcPcuTIEYKDgzl69Cjr16+nc+fOOepDjRo1iqCgINasWUNaWpo2\nf0MmVapUYc2aNdSoUYNLly4REBBA165d2bRpE4888gg//PADYNJjunz5MmvWrOHIkSMopSwcXkH5\n/fff+eKLL7Ttr776igcffJBbt27h5+dHjx49qF27NomJibRq1YqPP/6YlJQUgoKCWLduHQ899BAr\nVqzgzTff5KuvvuLpp5/WxidMmjSJRYsWaUq7mYSFhTFmzJhsttjZ2WVzoGfOnKFBgzu6ow0aNNA+\nOswxGo2sXr2awMBA9uzZw8mTJ4mNjaVevXqkpaXRokULjh8/zogRI2jVqhUANjY2uLi4sH///mz3\n5L1AuXQUn3yym4tfBwLQJZ+wpc3p06d59913SU5Opl+/fnz88cfUq1evtM0qHGNLR2hclxm3pCzK\njANcuXKF6tXvTCg2a9YsTUzx9OnTHDt2TJvsp0ePHgD8/fffREZGatc0LS1NExyMjIxk0qRJXLt2\njYSEBEJCQrKl2a5duxyd6d0wceJEXnnlFXx9fbWSXua1trW1JSIigmvXrtG9e3ciIyPx9vYG7siM\n646ijHDo5p05eVuVoh25cfXqVezt7VFK0aRJEz777DNcXFzu6SH+xUmmzPjNmzcJCQlhzpw5jBo1\nCk9PT3777TeLsDnJjGfOSFZQCiszPmnSJOCOzHiVKlUKlX5hMZf4rlixIo0aNbKQGd+4cSOTJk2i\nQ4cOvPXWW+zZs4eff/6ZVatWMXv2bH755ZdCpVuhQgXS09OxsbFh27ZtbN26lV27dmFnZ8djjz2m\n5WGVKlW0F6+I4OXlxa5du7LFN3DgQNauXYvRaGTx4sVs27YtW5iClCjq169PbGystp2bzHiNGjX4\n+uuvNfsaN26Ms7OzRRh7e3vatWvHpk2bNEehy4yXMdINd77Iy9JlSU9P56uvvsLFxYVvv/1W2z90\n6FDdSRQBusy4iZKWGbcWNzc3Tpw4odlQq1Yt7OzsOHLkCLt37871nLi4OM1RpKSkcOjQIQBu3LiB\ng4MDKSkpWh5lJbNEkXXJ6iQAHBwcqFGjBrt370ZEWLJkiUWbSibXrl3j9u3bAHz55Zc8+uij1KhR\ng7i4OK1q7tatW2zZssVCUufo0aOa07jnKGwreGktdRyN0mHBd4KItChMd4BiIjIyUgIDAzUZ8L59\n741JWctarycRXWa8pGXGz507J/Xr15fq1atLzZo1pX79+to0p+a8++67snDhQhERSUpKko4dO4q7\nu7s89dRTEhQUJGFhYRZ2ZvLXX39JYGCgGAwG8fT0lAULFoiIyNy5c6VRo0bi5+cnI0eO1PL/bggP\nDxcvLy9xdnaWESNGaPfKvHnzZN68eSIisnPnTnF1dZWmTZtK9+7dtalx9+/fL76+vuLj4yNeXl7a\nlK0ipmvi5+d31/YVFeVGZry4ljqORmkX9YcgIm8UNheLkMTERJk4caJUqFBBAKlbt64sW7bM4mVV\nnikLjkKnfHD27Fl5/PHHS9uMUmHmzJny5ZdflrYZGuVJZrzYSFemGrOWpWzH0aNHCQkJISYmBqUU\nw4YN4/3337eqMVRH517DwcGBIUOGcP369Twb4+9F7O3t+c9//lPaZhQb5dJRpNmYGsJKu9bfycmJ\nKlWqYDQamT9/vjZhvI7O/UrmXNP3G4MGDSptE4qVctmYnVjR1OOkpL9ZUlNTmT17NpcvXwagcuXK\nbNq0ib179+pOQkdH556lXDoKUarEi0J79uzB39+fl19+mQkTJmj7nZycqFChXBbMdHR0dKyiXDqK\ndKXoW0JpxcfHM3LkSAICAvjrr79wdHTMsUudjo6Ozr1KuXQUArikpRdvGiKEhobi7u7OnDlzsLW1\n5bXXXiMqKoouXcr6eHAdHR2doqNcOgqU4qEbt4s1if3799O3b1/Onz9PmzZt+PPPP5k+fbrFiFyd\nkkGXGS9dmfFly5ZhMBjw8fGhTZs2uQ7KE9Flxu9ZCtuvtrSWOo5G8Tr5j/wYl1io/sV5kVXyeMyY\nMbJw4UJJS0sr8rTKC2VhHIUuM24dxSUz/vvvv2uDzjZu3Cj+/v45htNlxu9dmfFy2QorNor6OXwJ\n3A1hYWEMHz6cL774gkcffRSAmTNnFmka5Z0hc68US7wLhz9oddjWrVtz4MABIHeZ8ccee4wRI0YU\nSGb85ZdfZu/evSilePvtt+nRowfVqlXTlFlXrVrFhg0bWLx4MQMHDqRKlSr89ddftG3bltWrVxMR\nEYG9vT1gkhnfsWMHNjY2DBs2jFOnTgHw6aef0rZtW4u0k5KSeOmll9i7dy8VKlRg5syZtGvXzkJm\n/PPPPycwMFA758KFCwwbNkyTy5g3b57F3OoJCQk89dRTXL16lZSUFN577z2eeuopEhMT6dWrF7Gx\nsaSlpTF58mR69+7NxIkTWb9+PRUqVCA4ODjb5ETmcQcEBFjoJZmzbNkyXnzxzjRi3bp14/Tp0yQl\nJfHKK69ox6pVq8bQoUPZunUrc+bMoWrVqrz66qskJCRQp04dFi9ejIODAwsXLmTBggXcvn0bFxcX\nli5dip2dXc43hhWYy4wDmsz4v/9tOVlBVFQUEydOBCxlxuvVq5enzPjAgQNJTU29Jzu3lMt/JCge\nunwLHrr7aqCLFy8yfvx4TY1z5syZmqPQKVvoMuMmSlNmfNGiRdlerJnoMuO6zHiZQhTUqV75ruJI\nT09n0aJFTJgwgatXr1K5cmUmTZrE+PHji8jKe4+CfPkXJbrMuCWlJTMeFhbGokWL2LFjR47HdZlx\nXWa8TPFAYgoVaha+HT46OprnnntO++IIDg5mzpw5uLi4FJWJOkWILjNeMIpDZvzAgQO88MIL/Pjj\nj5o6blZ0mXFdZrxM0TIiDlTBptA0p0aNGhw9epSHH36Y0NBQNm3apDuJcoAuM26ipGXGT506xdNP\nP83SpUtp2rRprnbpMuO6zHiZWeo4GqXv8X9Ebhest8SmTZskKSlJ2965c6dcu3atQHHcj5S1Xk8i\nusx4ScuMDx48WOzt7cVoNIrRaJQWLXIW+NdlxnWZ8TKz1HE0yuizp63OsFOnTkm3bt0EkKlTp1p9\nno6JsuAodMoHusz4vSszXi6rnhytqHZKTU1l5syZeHh4sHbtWqpVq8aDD5ZOY6yOzv2Aucz4/Ya9\nvT0DBgwobTOKjXLZmF0xn+O7d+9m2LBhWn1rjx49+Oyzz3JsuNLR0Sk6dJnxe5Ny6Shu2uReovjj\njz9o06YNIkKjRo2YPXs2nTp1KkHr7j1ExKIHkI6OTtlFingwMpRTR9GY3F9a/v7+hISE0KxZMyZN\nmnRXIzl1TF0ZL1++TO3atXVnoaNTxhERLl++XORdssulo6h05gbUqgsVbTl27Bhjxoxh5syZNG3a\nFKUUP/zwAzY25bL5pczRoEEDYmNjiYuLK21TdHR0rKBKlSoWI9CLgnLpKOzf30PyZ3WZtvAzPvjg\nA5KTk6lSpQqrVq0C0J1EEVKxYkUaN25c2mbo6OiUIsX6RlVKdVRK/a2UOq6UmpjD8cpKqRUZx/9Q\nSjWyJt4j0REYHvVnypQpJCcnM2jQoBwHUuno6Ojo3D2qOBo+AJRStsBR4AkgFggH+opIlFmY4YBB\nRIYppfoA3UWkd17xVnngQUm+aRo56+Hhwfz583URPx0dHZ18UErtE5GWhTm3OEsU/sBxETkhIreB\nUCDrePmngG8y1lcBHVQ+LabJN69R2bYi77/1LhEREbqT0NHR0SlmirNE0RPoKCIvZGz/B2glIiPN\nwkRmhInN2P4nI8ylLHG9CGQK3XsDkcVidPmjDnAp31D3B3pe3EHPizvoeXEHNxGpnn+w7JSLxmwR\nWQAsAFBK7S1s8eleQ8+LO+h5cQc9L+6g58UdlFJ7C3tucVY9nQEamm03yNiXYxilVAWgJnC5GG3S\n0dHR0SkgxekowgFXpVRjpVQloA+wPkuY9UCmQEpP4BcprrowHR0dHZ1CUWxVTyKSqpQaCfwE2AJf\nicghpdS7mFQM1wOLgKVKqePAFUzOJD8WFJfN5RA9L+6g58Ud9Ly4g54Xdyh0XhRbY7aOjo6Ozr2B\nPoRZR0dHRydPdEeho6Ojo5MnZdZRFJf8R3nEirx4VSkVpZQ6oJT6WSnlVBp2lgT55YVZuB5KKVFK\n3bNdI63JC6VUr4x745BS6n8lbWNJYcUz4qiUClNK/ZXxnDxZGnYWN0qpr5RSFzPGqOV0XCmlZmXk\n0wGlVHOrIi7s1HjFuWBq/P4HcAYqAfsBzyxhhgPzM9b7ACtK2+5SzIt2gF3G+kv3c15khKsO/Abs\nBlqWtt2leF+4An8BtTK265a23aWYFwuAlzLWPYGY0ra7mPLiUaA5EJnL8SeBHwEFBAB/WBNvWS1R\nFIv8Rzkl37wQkTARuZmxuRvTmJV7EWvuC4CpwHQgqSSNK2GsyYshwBwRuQogIhdL2MaSwpq8EKBG\nxnpN4GwJ2ldiiMhvmHqQ5sZTwBIxsRuwV0o55BdvWXUU9YHTZtuxGftyDCMiqUA8ULtErCtZrMkL\ncwZj+mK4F8k3LzKK0g1F5IeSNKwUsOa+aAo0VUr9rpTarZTqWGLWlSzW5MUU4DmlVCywEXi5ZEwr\ncxT0fQKUEwkPHetQSj0HtASCStuW0kApZQPMBAaWsillhQqYqp8ew1TK/E0p5SMi10rVqtKhL7BY\nRD5WSrXGNH7LW0TSS9uw8kBZLVHo8h93sCYvUEo9DrwJdBWR5BKyraTJLy+qYxKN3KaUisFUB7v+\nHm3Qtua+iAXWi0iKiERjkv13LSH7ShJr8mIw8B2AiOwCqmASDLzfsOp9kpWy6ih0+Y875JsXSqlm\nwBeYnMS9Wg8N+eSFiMSLSB0RaSQijTC113QVkUKLoZVhrHlG1mIqTaCUqoOpKupESRpZQliTF6eA\nDgBKKQ9MjuJ+nN93PdA/o/dTABAvIufyO6lMVj1J8cl/lDuszIuPgGrAyoz2/FMi0rXUjC4mrMyL\n+wIr8+InIFgpFQWkAeNF5J4rdVuZF2OBhUqpMZgatgfeix+WSqnlmD4O6mS0x7wNVAQQkfmY2mee\nBI4DN4FBVsV7D+aVjo6Ojk4RUlarnnR0dHR0ygi6o9DR0dHRyRPdUejo6Ojo5InuKHR0dHR08kR3\nFDo6Ojo6eaI7Cp0yh1IqTSkVYbY0yiNso9yUMguY5rYM9dH9GZIXboWIY5hSqn/G+kCl1CNmx75U\nSnkWsZ3hSilfK84ZrZSyu9u0de5fdEehUxa5JSK+ZktMCaXbT0SMmMQmPyroySIyX0SWZGwOBB4x\nO/aCiEQViZV37JyLdXaOBnRHoVNodEehUy7IKDlsV0r9mbG0ySGMl1JqT0Yp5IBSyjVj/3Nm+79Q\nStnmk9xvgEvGuR0y5jA4mKH1Xzlj/zR1Zw6QGRn7piilximlemLS3FqWkWbVjJJAy4xSh/Zyzyh5\nzC6knbswE3RTSs1TSu1Vprkn3snYNwqTwwpTSoVl7AtWSu3KyMeVSqlq+aSjc5+jOwqdskhVs2qn\nNRn7LgJPiEhzoDcwK4fzhgGfiYgvphd1bIZcQ2+gbcb+NKBfPul3AQ4qpaoAi4HeIuKDScngJaVU\nbaA74CUiBuA985NFZBWwF9OXv6+I3DI7/H3GuZn0BkILaWdHTDIdmbwpIi0BAxCklDKIyCxMktrt\nRKRdhpTHJODxjLzcC7yaTzo69zllUsJD577nVsbL0pyKwOyMOvk0TLpFWdkFvKmUagCsFpFjSqkO\nQAsgPEPepComp5MTy5RSt4AYTDLUbkC0iBzNOP4NMAKYjWmui0VKqQ3ABmv/mIjEKaVOZOjsHAPc\ngd8z4i2InZUwybaY51MvpdSLmJ5rB0wT9BzIcm5Axv7fM9KphCnfdHRyRXcUOuWFMcAFwIipJJxt\nUiIR+Z9S6g+gE7BRKTUU00xe34jI61ak0c9cQFAp9WBOgTK0hfwxicz1BEYC7QvwX0KBXsARYI2I\niDK9ta22E9iHqX3ic+BppVRjYBzgJyJXlVKLMQnfZUUBW0SkbwHs1bnP0auedMoLNYFzGfMH/AeT\n+JsFSiln4ERGdcs6TFUwPwM9lVJ1M8I8qKyfU/xvoJFSyiVj+z/Arxl1+jVFZCMmB2bM4dwbmGTP\nc2INppnG+mJyGhTUzgxBu8lAgFLKHdPsbYlAvFKqHvDvXGzZDbTN/E9KqQeUUjmVznR0NHRHoVNe\nmAsMUErtx1Rdk5hDmF5ApFIqAtO8FEsyehpNAjYrpQ4AWzBVy+SLiCRhUtdcqZQ6CKQD8zG9dDdk\nxLeDnOv4FwPzMxuzs8R7FTgMOInInox9BbYzo+3jY0yqsPsxzY99BPgfpuqsTBYAm5RSYSISh6lH\n1vKMdHZhyk8dnVzR1WN1dHR0dPJEL1Ho6Ojo6OSJ7ih0dHR0dPJEdxQ6Ojo6OnmiOwodHR0dnTzR\nHYWOjo6OTp7ojkJHR0dHJ090R6Gjo6Ojkyf/DyQaREMeHMkcAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7909f26d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_classes = len(tags_counts)\n",
    "roc_auc(y_val, y_val_predicted_scores_mybag, n_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEWCAYAAAB42tAoAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAIABJREFUeJzsnXlcVdX2wL+LWQTBWZxxyHkeS02f\nlZmVaVZappmlqfmc5+rV8+XL0jTNgbTSrF/z0zTT0jJtMFMzDU0tB1RQcURAZLp3//7YF7jABS4K\n3Avu7+dzP+y9zzp7r3O496yzp7VEKYXBYDAYDDnh4WoFDAaDweDeGENhMBgMhlwxhsJgMBgMuWIM\nhcFgMBhyxRgKg8FgMOSKMRQGg8FgyBVjKAzFHhGZISJvu6DdviJySkTiRaRVUbdfHBCRCBG5M5fj\nG0Xkieuo9yUR+eDGtDM4izEUboSIdBaR7SJyRUQuicjPItLO1XpdLyKyUkReLux2lFL/VUo9Xdjt\nOGAuMFopFaCU+j3rQRFRInLVZkiiRGSeiHhmkblPRHba5C6KyP+JSPUsMiEi8o6InBGROBE5JCL/\nFpHSDtqsbWvXq8Cv9gZx9HBXSt2jlHrPVToZnMMYCjdBRMoA64E3gXJANeDfQJIr9TLkSi3gQB4y\nLZRSAUBXoD8wNO2AiDwEfAi8AVQAmqD/3z+JSFmbTDngF6AUcKtSKhC4CwgG6hbo1RgMOaGUMh83\n+ABtgZhcjnsAzwMngHPAKiDIdqw2oIAngVPAZWAE0A74A4gBFmWpbyhw0Cb7DVArl7Y7Attt9ewD\nutnKywGRwP22fABwBBgMDAdSgGQgHvjSJlMV+B9wHjgOjLFr5yXgU9u1xaEfwm3tjk8FomzHDgN3\n2J33gZ1cb9u5McBWoJHdsQhgku2+XAE+Afzyc88BX9s1KeAqcDSH8xVQzy7/KbDYlhZbvVMctLkf\nmGnLvwyEAx5Ofo9O2tqNt31uze274+D8brb/6RSb7BmgD9AL+Au4BMywk18JvJz1/Cz3+06gp+27\nkGLTa5/t+Fbg6Vyupwmw2dZudFrbDv7nnwFnbf/TH4Amdsd6AX/avjdRwCRbeQX0y1mMrf4fnb3P\nN9vH5QqYj+0fAWWAi8B7wD1A2SzHh6IfwnXQD+TVwPu2Y7VtD4cwwA/oASQCXwCV0L2Tc0BXm/wD\ntroaAV62h8j2HPSqZtOrl+2Bc5ctX9F2vIftB1oJWA58bndu1oeIB/Ab8C/Ax3Ytx4C7bcdfsund\nC/AEXgF22I41QBvBqnbXXNfuvA9s6VvQD++7AG/0A+8I4GM7HgHsRBuscmhjOSKHa8/xntuOZzIE\nDs5PPw40RD90x9vlFRDq4Lx/A7/Y0juAf+fje5T2XfBy9jqynN8NSLX9j7yBYWij/iEQiH5wX0vT\n28H/uBsODEXW/5Pd8a3kYChs7Z0BJqK/14FAB0d12a4xEG3E3wD22h07A3SxpcsCrW3pV9C/GW/b\npwsgrn4WuOPHDD25CUqpWKAz+ke+HDgvIutEpLJNZCAwTyl1TCkVD0wHBmQZi/6PUipRKbUJ/bD8\nSCl1TikVhX5bSptwHQG8opQ6qJRKBf4LtBSRWg5UexzYoJTaoJSyKqU2A7vRD3NsbX0GfGcreyaX\ny2yHNjAzlVLJSqljtmsdYCfzk60tC/A+0MJWbkE/BBqLiLdSKkIpddRBG/2Br5RSm5VSKeh5hFLA\nbXYyC5VSp5VSl4AvgZY56OvMPc+LPSJyFW2QtgJLbOUVbH/PODjnjN3x8jnI5If8XkcKMMt2/z62\n6bJAKRWnlDqAfjtvkcO5Bcl9wFml1Ou273WcUupXR4JKqXdtx5PQRqSFiATZDqegvzdllFKXlVJ7\n7MpD0L3pFKXUj8pmQQyZMYbCjbA9uIcopaoDTdFvvW/YDldFDx2kcQLdG6hsVxZtl77mIB9gS9cC\nFohIjIikdbsF3XvISi3g4TRZm3xn9A8sjWU2fVcqpS7mcom1gKpZ6pqR5RrO2qUTAD8R8VJKHQHG\noR8C50TkYxGp6qCNTPdJKWVF90Tsry1rGwE4xpl7nhetbfX3BzoAaRPQF2x/QxycE2J3/GIOMvkh\nv9dx0WaoQX9vIOfvUoEhIgdsE//xItIFqAE4ehnIep6niMwWkaMiEovuxUCGse2Hfok5ISLbRORW\nW/kcdE9rk4gcE5FpBXpBJQhjKNwUpdQhdLe+qa3oNPpBm0ZN9BBBNPnnFPCMUirY7lNKKbU9B9n3\ns8iWVkrNBv0jRRuKVcAoEalnfxkO6jqepa5ApVQvZ5RWSn2olOqMvg8KeNWBWKb7JCKCfuBEOdNG\nbnVxnfdcaT5FT0r/y1Z8GD0X8LC9rIh4oB9s39mKvgX62sqdas5BWUF+d7JyFfC3y1fJRTbXt3Wl\nVBOlV5AFKKV+RH9f6jihw2Po4dQ70XNItW3lYqt3l1LqAfTw6BfouSJsPZCJSqk66HmtCSJyhxPt\n3XQYQ+EmiEhDEZmYtjRSRGoAj6LHqAE+AsaLSKiIBKCHiz6xDR3llzBguog0sbUVJCIP5yD7AXC/\niNxte3PzE5Fudks4Z6AfAEPRb2ir7JaARpP5h74TiBORqSJSylZfU2eWAItIAxHpLiK+6HmMa4DV\ngeinwL0icoeIeKPHt5PQk/H5pSDvOcBsYJiIVLENcUwCnheRx2z3tQrwNnq+ar7tnHm2/HtpQ4Mi\nUs221La5gzbOo++L/X0v6OuwZy/QS0TK2fQfl4tsNFA7H0ZvPRAiIuNExFdEAkWkgwO5QPT/+CLa\naP037YCI+IjIQBEJsg2lxWL73tiWJtezvUxcQQ9vOvpO3fQYQ+E+xKGHJn61jWnvQK9+mWg7/i56\nzP4H9GqhROCf19OQUmoN+m38Y1tXfT96At2R7Cn029oM9EPoFDAZ8BCRNsAEYLBtqOJVtNFI68K/\ngx4bjhGRL2wy96HnBI6jh1feRr8F5oUv+kF7gYzJ8+kO9D2Mnld50yZ7P3pVVrITbWSlwO65Tbdw\nW12TbflPgEHAePRD7k/0fEqntCE82zzKbejx9F9FJA7d27iCHjbJ2kYCMAv42XbfOxb0dWThffRK\nuAhgE3oVWU58Zvt7UUT25CIH6Dd+9KKE+9H/87+BfzgQXYUeTotC38MdWY4PAiJs3/UR6DkbgPro\nHls8ure3RCn1fV563YyImbsxGAwGQ26YHoXBYDAYcsUYCoPBYDDkijEUBoPBYMgVYygMBoPBkCtu\n52EyLypUqKBq167tajUMBoOhWPHbb79dUEpVvJ5zi52hqF27Nrt373a1GgaDwVCsEJETeUs5xgw9\nGQwGgyFXjKEwGAwGQ64YQ2EwGAyGXDGGwmAwGAy5YgyFwWAwGHLFGAqDwWAw5EqhLY8VkXfRnkLP\nKaWaOjguwAJ0QJEEYIhd5CmDwWAoGpQCEcfHkiyQmApWpT++nhDg41g2Kg6Srbo+BVQP1PJZuZoC\nJ65oGQWU8oK6wVy6dA2rVaV/KlcujUTEwsVruu2YRGhVmVhfT6Kj47FaFSkpVoKD/ageEgA/R9nq\nVOAhcHsNdu2K4sqVJHwd6ZEPCnMfxUpgEdoFsCPuQbv5rY92r73U9tdgMBQ211L1AzDVqj9lfKG0\nd3Y5q4IfI7XM1RT9sBqc7b1PP8x2nIZTcRl1tqgE/6jpuP3XfoXTVyHFAhYFL94GIQ6C5n1/Eh5Z\nB20qa10alUe90Z0LFxJITEzl2rVUEhNTad68Msz4AdYd0REllIL/3s6xFhX45ZdTWCwKi8VKvXrl\n6NK2GtRdptu12rxnnx/NwoW/EhERQ0qKhZQUK9Ond6bW1yfg+R8z9BnWnL+fbMLw4etJSbFgsSjq\n1i3LBx88qPX863KG7I+P8vwH+1ixYi/JyRaSky3MXtKL3g0rwZCNAHiWvoBX66swuQODB69BWTO8\neb/zXh8iNx5H9p/PqDOxLnuSU/jii8PpRa3bhNCnV334v10Zcp4eUKM9b32+i6ioeIKCHPxv80Gh\nuhkXkdrA+hx6FG8BW5VSH9nyh4FuSqlc4wO3bdtWmQ13BrflfAKkWCHZAgkp0LiCY7m/LsEvp/Ub\na7IFGpeH7o5ClgMv/wIRVzLqfeV2qO0ghMcf52HQV/rhm2KFphVgTV/HdY79Dj48mJF/8w4Y0Ci7\nXIoFqi7NVJR8fjS/XUsh9moKSUmpJMYkUm3TCfyqBcBbf2QI9qnH5ccb89X6v0hJtZKaaiUoyJdH\nHmkKT22EiFhO1AjkUlk/PCa35+t9Z9j92xlSUvRD9YHeDegYfgkOXODn9iEEXE1hc89QKtYIxG/V\nOWpevbGH383Cr6tf5GLkH5w+/MNvSqm211OHKw3FemC2UuonW/47YKpSKpsVEJHhwHCAmjVrtjlx\n4ro3GBpuFixWSEjV3XovB1NxsUmw4RgkWuDIZajkD2PaOK5r4W/w5VH9Fp6UCtM6QL8GjmUrLcoc\n8PPcs46HNVbuZ+FeRfgtjsKUGwwFx187PuKnjyZgTU2+bkNRLFx4KKWWoeMy07ZtWxNpqaShlH5g\nl8rh67j/Amw8ph/u8SnQujIMauJY9uG18OsZ/VAH+OZhLZ+VyDj453cZ+SblczYUp+Nh77mM/KXE\nnK/F20OPU6eRYgVP0UMB9vh6En6LA70MTtPMsokxyY8WSt1bLjRCbh1AtfhU2HUG8OBifDtSbmvI\n6S7VePbZDemyVasFsnjxvTBnJ+X+ukTVi9f0gXndefmDvbz33r502WkTb2Ny11CY9L2O6O0hUL82\nLOlB1aqvk5xswcNDEBEiIsZSasle2BShlx0lWaGyP2v61mHKc1sQAW9vT3r3voVXZv4D+n8JwJ9x\np9gTd5zHd8xjzJiNeEYGcF+vBaxbN/K674cZejIULHHJcC4BLifqB2r9shDqYJjEYoWOH0BEbEZZ\n5EjHk3+fHILR32bk+90CYT0ct99njZ7US2N1H+hSPbvcsRjo8EFGvnYQ7BoE5xNY+KuF8JMpuV9n\nAbJ05kf8MKU9y4Y245NgPzhySd+fBo6HrRpcPESDyxlj1GHfjiDk6tmiUjcbJy+XoWLF0pTyEIhJ\nAj9PQMDHg1RvD06fjkuX9fTyoFrVQG3IrUo/LBHw8yQmLpnYKxlGOCjYj6BAXz3cphR4eGh5bw9O\nn4mnasBlPtjfmWvW0gwc2Bx/EX3ffMtD9R7g783vB8/zfx+G4+nhgYcntGhRhQGPNNFzKB6ie3sC\niLBhw99En4vH6hVIkncVevduQPXqZbJdb0JCCjt2ROLj44mnp+Dv702LFlUc3puLFxO4di0VHx9P\nfHw88ff3xsfnxiaWcyIhIYGXX36ZOXPm4Onpyf79+6lXr176cREplj2KdcBoEfkYPYl9JS8jYXAR\nCSnwU6R+Uy/to99uxuXwfZuzE5buzcjP7AQjW2WX8/TI/mYelwy+pbLLBmZZZXLV8UN84fo4wnt0\nBXsbEg6EX3Ks678fy5xfkoNcIdLY+h3XZkyjHdBuFSy3P/hNRtJDAQKlU+JzrS+p7hMggreH4OEh\n4O3B/z79nW//rMKBaO04dPX/+lOhgn+2c7dvP8W06RkG+daO1Xn11bsctvOf/2xj167THI+vSapn\nGRYv7kX37qHZ5OIuX+ON//yAj48n3t4elA/2Z9zwjg7rjImI4cyZOPz8vChVypvAyqWhrIPvA1DV\n9vfx3G4G0KoatLqzex5Sml6DHMzROMDf39vhtTqifPns97kw2LhxI88++yzHjx8H4KmnnqJ8+fIF\nVn+h9ShE5COgG1ABiAZeBLwBlFJhtuWxi4Ce6OWxTzqan8iK6VEUIPvO6fH5M1chKh6Gt3D89n8m\nHpqvzMhX9mfh7IeL9K27qIk/dpCmB6YzesytBJ3/GWIOgneZ9OGChMRUzpzJeGiX8vemakgAXDlW\nZDqu3a/nSUQUNUJDaDVtA3hnfzANHLiaixcTKF3aBz8/LxYs6OnQUERFxbJly3H8/LwICPChSpUA\nWrUKKfTrMFw/UVFRjBs3js8//xyA5s2bExYWxq233ppN9kZ6FIU69FQYGEORBxarHs6JuKLXdQf5\nwQP1HMs+sUFP6KbxXi/oVSe73LVUqBmWkffxYNhzAwpW7wKiWYhiTFel5zs89CTy+3PeZufX3zG5\n28+cjg2katVAatYMgqRYuHQwjxqvn+0hGT/WUqnXCK/YjAld55Hk5Zte3hP9dtwL6JqYSrduKyld\n2oeAAG+CgvxYtcrxqqXjUakcOXKJgAAfAgN9qVIlwOHD31Cy6dOnD2vXrsXf35+ZM2cyduxYvLwc\nDxQV16Enw/WSZAEvBxOkANtPw4NfZOTbh+RsKCplebBE6rHkhevjsvcWsg7T2Fg+qlzmgi+PwEs/\nQ7AflPODO2rBiJaO2z8bD96eemjJNm67bVsEO3dGcfZsPCdPxjJsWGt69Kib7dSEq8n0bP4MA1ru\np065y/RseFQfOGb72DGoFAyyPW9rlrXNiWQd5AzWbZw6FUtSkp4Ir1omjqvV+1Kxrm3ivP6D6W/s\n4fujeXDs1/gOa8O1AZmn4OJ8AjnvXymbzrdGxxOMLyOTFY8G+KQPn6TjAzv2jHd4q7ISGgqhoWWd\nkjWULFJTU9ONwauvvoq3tzevv/46NWvmsGelADCGorjwn+2w7zyciNUP9M2P6HXyWamaZdNSVFx2\nmTSyGIqF8cGE52OcvllNB+vY76+nP3bExyezZs1Bzp6N59ixy/j5eTF/fk+okn2D1eef/8miRRkb\nhzp1qqENxeUjEB8J8adh1xz8z+/lh1E5KOaTeQIyJcWCt7rK0u1tOX4pmJTKnZk/7259UAQqtgAv\nPwDefvF7TkXHEhTkS/nS/jzRrQVHagSxBrgEvAq0A3Z2rgu/3Zat6Y1AWaAR4Gn7+KUdrOxgQ5nB\n4CRXrlzh+eef56+//uLrr79GRGjQoAGfffZZobdthp7chXjbaqE6wY6P910DP9mt5ll+N/Spn10u\nyQLV7TZIeQhEjtBv7lnZeAw+PayNS0hphnnUTj/UrKY3Y+4LzFXlo0cvcezYZU6fjuP06Tj69WvM\nLbdkn0A7cyaOqlXnpedr1CjDyZN2b86RP8CRdeDpzaUdq7AkxJCUqvUNLONLkMeFXPXY/Fcd3trR\nhudeG0qru3tmO37kyCXefnsPlSuXpnLlAOrXL0e7djnvX1BoNwGvk61z4pCuQBfgecA3D1mDIb8o\npfjss88YN24cZ86cwdPTk127dtGqlYNFIrlghp6KKxFXYP5u+D0ajsRAq8rwVT/Hsk0rZDYUR2Mc\ny/l66l2+gT5Qs4z2N5NsTTcUmYeVgqFddq8pacNJVqvi8uVrOa7cGDfuG9av/ys9Hxpa1qGhCA5O\nf6cm0DcR36Q41J6FSMxR+H1hJtlyHkCmF+8sPaLqXSHxEtR7gHf33k5MUgAVO/vzxH1+VG3p+OFf\nr145Zs++M1PZeeB9IBnYChwCTqB7ABaHtUAToBm6R9EJ8AeaYlvhaTAUAkePHmX06NF8/fXXANx6\n662EhYXRvHnzItXDGApXIpLZjcJfl3J2UNY0S0z0C9dyrndb9k1IDucdHBBaTvH00+sIDz/H/v3n\naNasEjt2PO1Qtlq1zD2O6OgsSzeVghOb8fthKpuGx3PXLUcyjn3voMLWYzl10Y/dey8T5X8XVULK\n0KRpRRo1rAjiCaWrZLo3QzvleTmZSAXGAktykclqJF5BG4XOGINgKFrmzp3LCy+8QGJiIsHBwbz6\n6qs8/fTTeHgUvdNvYygKA6uC8POw5SR8ewJe6wpNHMwn1AzUb/5xyTofk6SHnyqXzi7btYZelVSr\njP7k5MHSAVmNRK1gK2PvDyQwMPtAyZ49Z2jz6O/p+cjIWNg2GRxs6BoVGk2nR6PT802v/gQb7DYe\nHdQb2gS465bM5yoPb6R8E6h6G9zSD2rqte41gBoPOX1p2bACF23p48C3wK/oTTuOqAPcgZ5XqAP0\nBsqjt4qYH4fBlSQkJJCYmMigQYOYO3culSplXyBRVJjfQmEw4wd4Jzwj//Vxx4ZCRJfvOK3z9YL1\njmZHhqJKacdLV50gzUhcjjjNF/NWY7Eo2m4cSM+e9eDiQdi7GDy10WieauX13r+SNnU1sesvkMOU\nUHMvaJ7V60VOq03bT4Ma3cA3GKq0R3Jy63wDJAAO7pxD3gDGYHoJBvfh/PnzHD58mM6dOwMwdepU\nunXrxu233+5izYyhKBzaVslsKDYeg4ntHMtOaqeHaFpW0ktKr5OYmEQiI2Np2jTzW8fC9Rlj/P+b\n8z+CS12jT9NDtNj/sV5BFX86k7wXMCGn7+U9OXmMz4XSIVDzjpz9/TuBAnYCV+zKdgBHgC/INosB\n6F5Bqu2cpsA/0JPNFTHGweBeWK1W3n33XaZMmYKXlxeHDh2iXLly+Pr6uoWRAGMo8o9S2kFcXDLc\nXsOxTFbfQvvOQ/TVnIeUrpOoqFjGjfuGffvO8vfflwgNDebYsbHpx+2HnMpbo0l59d94edqtcrOf\nUmg+HMrq8aEDB87h6elBSEggZcr4IL7B0PRJ8CgcHzV5UQ/nVh+lMQeYVEi6GAwFyf79+xkxYgQ/\n//wzAHfddRcJCQmUK1cujzOLFmMo8sN7+2FFOBy4CP5esGUA1HWwnLVyaWhbGSqV1oFb7qzl2Eg4\niVLK4VBNUJAfq1cfxGoLdnL8eAwxMYnpq4zSjEQzr52MibtHL+mxcTypIaGdH4BGA6FcQ/DM2BPR\n5LoW0BUMCu0m+D0gheyjXmmeh6zABaAFcLutPM3kmh6Dwd25evUqM2fOZN68eaSmplK5cmXeeOMN\n+vfvXyjDsjeKMRT54ZfT2kiAjnUwajOsf9DxHoUND133cMuFCwl8990xtm6NYNu2E0yadBtDh2Zf\nMx0Q4EPjxhXZvz/DBfbevWfp1q12Jrkxcfekp5MaPYPvPUsIFfcKl/41sAmYn4uMFWMEDCWDhx56\nKH3T3KhRo5g1axbBwTnsoXIDjKHID8NbwP8y9g2wJ1rPRThyUXEDbwVffHGIYcO+TM9v3RqRyVDY\nDyl1HNkfe1+c//cn/N+fOeyunqjcbkPYacDR7odAYDRwC9ARaFiUShkMhczUqVOJjo5m6dKldOjg\n/hGgjaHISmSc3qTmiNaV9ZDSnnPQrQY82ui6VyJdvJhAmTK+eDvojWSdkN627USm4af8eG1tZtkE\nDR+Du9+9Lj0Li1RgBno+wZ5uwEvo3c4GQ0kgNTWVN998k4iICBYsWABAt27d2L17t0v2RFwPxoVH\nGpcT4b874P0DsOpe6FHbsdyhi3oPQ07GJBcOHbrA6tUHWb/+L3bujGLr1iF07pzdkVdcXBJlysym\nx8j7qdk0Bz2A5R1WwcktkDaMdH4vxNqFiW30ONwVBt7XPz9S0Cj0vEJ4lvL7yXmvg8FQXNm5cyfP\nPPMMe/fqGC379++nSZMcojMWMsaFx42yPQqe/gbOJ+j8+C3w46NQzkHQlIbXHwxk+PAv+fHHk+n5\nbdsiHBqKwEBfBv/7UXwqOI5wBtCs1J+wNRdPo+NTXbZKKSsKvfktuw9YqAL8lMMxg6G4EhMTw4wZ\nMwgLC0MpRa1atVi0aJHLjMSNYgwFaJ9I8ckZ+XMJMGUbvJ3dwdyN0L9/k0yGYuvWEzz3XGaZtPmH\nNCPRLPAYY0JtbsN/nZUhaO/Bo/eajLSHl97Y5iZG4m/0PIMjYtFzEQZDSeLjjz9m3LhxREdH4+Xl\nxcSJE3nhhRcoXdp9evb5xRgK0MNIY1rDqzt1vnYQPNIgX1VYrYqNG//mo4/2s3JlH7y8so89PvRQ\nY8aM+Tp9OWtsbFLmpa+RPxF+snG6fDPLJsacexTOZasK7npL7+mofTcE1c6XroXNR+ilq9PQu6Xt\neQRYgXaoZzCURDZt2kR0dDSdOnVi6dKlNGvWzNUq3TBmjiKNa6nwj4+16+4JbdMD6eTF1avJvPrq\nz7z//h9ERGiPrl999Ri9emV2Ae6sU740ll8rDy1GQECWNUE+ZaDlKN1zcEMCgKsOyt8FnixiXQyG\noiApKYmoqCjq1NELWy5cuMCXX37JE0884VaT1SYUqrPEJEKiRftNckSKxfGeiFywWhUdO77Nrl3a\nFUZeE9DO0Mz/EGPuD4byjfMWdhMs6A1v9oHjhqLnJxZhehCGksmWLVsYOXIkHh4e7Nu3Dx8f5511\nFjVmMtsZYpOg0bswvg1MyWHdcj6NBICHhzB//t107rwCIFcjkS0Y0LGv4Osn4dr5jLL206DLK/nW\nw1VcQbvhPpCl3GyOM5RkoqOjmTRpEh98oD0kN2zYkMjIyPReRUnj5jAU8cnw6HpItcKcXVArCPrn\nbwuX1apQSuHpIE51p041eeSRJqxdeyi9bNnIsnlvxV9zX+Z8rbvc3kicQcdzeDkXmQsYI2EomVit\nVpYvX860adOIiYnBz8+P559/nsmTJ7t1b+JGKfmGwmKFJzbATrtBkXFb9IR1h5A8T1dK8fXXR3ju\nuS0MH96GESMy99zS5h7KdO3OoK7d08tzNBLJ8bB7Lvzy74yynu/BLQ+Bt3sP0CwFcgpTHQLswvEu\na4OhpNC3b1/WrdM7fu6++24WL15M3bolf3F3yTcUnh5wb134OQostvmYVKsOF5oHhw9fYPjw9fzw\ng97ENnPmNp54ogWlSmU40HM0Qd2spnfmgstH4OR3cHQdHN+QvaEmg52/HheQgg4Xam8kPgRuQxsI\nb0wPwnBz8OCDD7Jz504WLFjAww8/7JYO/AqDm2cy+8dIGLpR75lY3QeC8vZ6FBUVS716b5KYmJpe\n9tprdzJ5so7Bab+SKS3OdDYif4BPHDikCKwJPZZD7R75v5YipCfwTZay7cCtLtDFYChq1q1bR2Rk\nJKNG6dckpRTx8fEEBha/HUBmMtsZulSHbx6GMr5OGQmAatXKMHp0O+bO/SW97Nixy9mWumbrQQAo\nKxz9Etb2ySgLuRXq3Av1+kAF996hmQQ4CqP0DcZIGEo+J0+eZMyYMaxduxZfX1969uxJnTp1EJFi\naSRulJvHUADUyb8b32nTOrNs2R7uH9eHUpUrkQrZjESmlUwA1lSYn8V49HgHmg29DqWLnh/RMR7s\nMauYDDcDKSkpLFy4kBdffJHWUoCLAAAgAElEQVSrV68SGBjIyy+/TK1atVytmku5uQxFDvzxRzSN\nG1d0uJu6fHl//vxzFC+tTc1U7tBApLGkYuZ836+gTq+CUrfQUMADwJd2Zb2Bta5Rx2AoUnbs2MEz\nzzzDH3/8AcDDDz/M/PnzqVbNLNEoeYYixQIeoiexnWDBgh1MmrSZ6dM7M3PmPzIdc7Sb2uFcxNWz\nsPt1vZrJw0v3KADKNoChh7LLuyEfAgOzlL0PPO4CXQwGV/DCCy/wxx9/EBoayqJFi+jVy/1f7ooK\n99lfXlCM3QJVlsAbu7VzvxywWhXTp3/LuHHfkJpq5eWXf+D7749nkslqJBzORQCsaKiNBGQYCYAn\n/7yuSyhKLgKvkN1I7MUYCUPJRilFbGxsen7RokXMmDGD/fv3GyORhZK16in6KrR/X4cpBfDygEV3\nQL/sDv4+/DCcgQNXZyqrWjWQv/4aTenSeuPMsCU6UpzDXoSywoH34Jss8w6PfA+V2+oYEG68dO4g\nOs50VJbyMGA4Zj7CULI5fPgwo0aNQkTYvHnzTbHM1ax6SmPZvgwjAVDGB+6q7VD00UebcunSNSZO\n3ERysgU/Py8WL+6VbiQWro/LuR2l4Jun4cCKzOWjLkCp649XUVR8AfR1UB4ONC1iXQyGoiQxMZFX\nXnmF2bNnk5ycTPny5YmIiCA0NNTVqrk1JWvoqXklCLFz+De4iV4O6wARYfTo9vz669N07lyTbduG\n0KePduthPzeRbbjp3F6Y55HZSPReAxOV2xuJ19DeXe2NxEj0iiaFMRKGks3mzZtp1qwZM2fOJDk5\nmaFDh3L48GFjJJygUHsUItITWAB4Am8rpWZnOV4TeA8ItslMU0o52LrsJA/UgztrwZt74KODMC7v\nXlbLllX48cfMDrDtjUSmlU0XD8H7reyvAJ48COXyF7uiqPkGvXEuKzsA9w/rbjDcGEopnnrqKVas\n0C93jRs3JiwsjC5durhYs+JDofUoRMQTWAzcAzQGHhWRrH6znwc+VUq1Agag/c3dGKW9YVoH+PVx\nnb4BMhkJpWDT0xn521+DiVa3NhLX0CFGsxqJ14CTGCNhuDkQEWrXrk2pUqV45ZVX+P33342RyCeF\n2aNoDxxRSh0DEJGP0cv07ZcCKaCMLR0EnC6w1v0yLu3YscucPHmFbt1q53maw7mJC/vhPbsoVS1H\nQ7vJBaBk4ZFM9hgQM4BZDmQNhpLG3r17OXPmDPfccw8AU6dOZdCgQWaY6TopzDmKasApu3wk2Z2L\nvgQ8LiKRwAbgn44qEpHhIrJbRHafP3/ekUiOxMcn07fvJ9x55yreeGMHOa3yWrg+jmFLLmWem1BW\nOLkls5EoU0v3JtyU88AcwH5mJgQdktQYCUNJJy4ujgkTJtCmTRueeOIJLl3SKxd9fX2NkbgBXD2Z\n/SiwUilVHegFvC8i2XRSSi1TSrVVSrWtWLFitkpyY/ToDfzxRzQWi2L8+G94/PE1JCWlZpNz6JZj\nnid8dkeG0D3vw7AI8C6VLx2KkkrAFLt8B3Q3zX01NhhuHKUUa9asoXHjxsyfPx+Axx57DG/vGxt+\nNmgKc+gpCh0dM43qZF+2/xS2IXSl1C8i4gdUAM453cqZeL2yycF8xKZNR3nvvX2ZypKTLfjYxcPO\nuvs6fc/EvrcyV9Z7DdTvgzuigO+BR+zKugLzgNYu0chgKDpOnDjB6NGjWb9+PQBt27blrbfeonVr\n8+0vKAqzR7ELqC8ioSLig56sXpdF5iRwB4CINEI7LM3f2NJLP0ODt+HRL+G9/XDxWvqhrl1r8frr\nPQgO1n5QmzSpyIoVD6RvrnHoBfboenhd4NsRGW1MVG5rJLag/4l3oHdZg+49bMUYCUPJRylFv379\nWL9+PWXKlGHRokXs2LHDGIkCptB6FEqpVBEZjV6d6Qm8q5Q6ICIzgd1KqXXARGC5iIxHvxgPUfnZ\nKm6xwpaTkGSBb0/oT4NyUF4PtPj6ejFhwq088UQL/vOfHxg0qDkBARnhCrMtg71wAN67P3Mbfb+6\n/ptQiKQAjgIvTkK75DAYSjJWqxUPDw9EhLlz5xIWFsb8+fMJCck7aqUh/xRvFx67z8I9n2ccLOsL\nB59yyiFgtqBD5/bB+y0zBPp947ZBhTYBd2cpmwm84AJdDIai5OLFi0ybNg2A5cuXu1ib4sWNuPBw\n9WT2jXE+AaoGZOS71HDaa2ym1U275mY2Evd96rZGYiyZjUQN9M5qYyQMJRmlFO+99x4NGzbk7bff\nZtWqVURGRrparZuG4u3r6Z460DMUDl2C705A0wpOnWa/V2JM9Q/gO7s9EXcsgQYPF7SmBcZCu/Qa\nwD1nTgyGguPgwYOMHDmSbdu2AdCtWzeWLl1K9erVXazZzUPxNhSgPbQ2Kq8/wPHjlwkNLZvrKem9\niRoC343KODDkAJTPunncfWhol74E5H6VBkPxRinFv/71L1599VVSUlKoUKECr7/+OoMGDbopvL26\nE8V76CkLu3efpm7dhfTr9yn79p3NU37MX3buw5/Y77ZGIi0M6WFb3g9jJAwlHxEhKiqKlJQUhg0b\nxuHDhxk8eLAxEi6gRBmKF1/cilKwevVBWrZ8i3/963vnTmzyBFRoUrjK3QB+WfKXXaKFwVD4nD59\nOj0UKcBrr73GTz/9xLJlyyhXzkFcGEORUGIMxcmTV9i48e9MZZ061chB2o7WY6HnysJRqgA4jF4K\nm4Yiu+EwGIo7FouFRYsW0ahRIwYMGEBycjIAFSpUoFOnTi7WzlBiDEVqqpXu3TN8ubRsWYUePepm\nk8vk9M+/MvzjjaJQ77pQZJ6XsLhKEYOhENmzZw8dO3bkn//8J7GxsdStWzdTiFKD63HKUIiIj4jU\nK2xlnOZULAxcD//dAeuOQMQV6tQpy+bNg1i7dgD16pVj9Oh2Dscy0yeyLZugy+xsx92JB+zSaylB\nVt1gAGJjYxk7dizt2rVj9+7dVK9endWrV7Nu3ToqVHBuBaOhaMhzw52I3It2G+SjlAoVkZbAi0op\nR9E0C522bduq3S9/BoPsdkx3rApfPpieTU624OEheHnZPVpjjrLw/V2Ee+r9EcuvldeuOdyUa2R2\nE+6+mhoM+UcpRatWrdi3bx+enp6MHTuWl156icDAwLxPNlwXhb3hbibaCWkMgFJqL+Da3sWhi5nz\njTJPcvn4eGY2Er/+F96pl24kmlk2QdfXC1vL62YnmY3EUVcpYjAUEiLC+PHjad++Pbt37+b11183\nRsKNcWYfRYpSKibLMI5rX3CPxmTO189jsehPz2XKjnnmXvBxzy/lYOD9LPk6LtLFYCgokpOTmTdv\nHp6enkyerDe4Dh48mMcffxxPT888zja4GmcMxUEReQTwEJFQYAw63LLrGNkSOlSFvy/B4cvQNIcY\nFTHH4B09ob3Q56OMcjc1ElfIbCS2Abe7SBeDoaD48ccfGTFiBH/++Se+vr4MHjyYypUrIyLGSBQT\nnDEUo4F/ofd9rUZ7g51RmErlSeMK+gNYLFY8c/Lv9E7Gqqf0Yaea7hvIJNguHQ+UdpUiBkMBcOHC\nBaZMmcKKFSsAqF+/PkuWLKFy5cou1syQX5wxFHcrpaYCU9MKRORBtNFwKUopGjZcTEhIAN27h9K9\neyi33VZDz0/89HyGYLNhcEQnx9znnr0JOx+49MQYCUPxRSnFypUrmTx5MhcvXsTHx4fp06czbdo0\n/PzMLqDiiDOrnvYopVpnKftNKdWmUDXLAXs34+Hh0TRvHpZ+zNfXk5iYafj5eengQzYWNrhC+Ekd\n/jQ9gp0boci8qsCscDIUZ5RS3HnnnWzZsoXu3buzZMkSGjRo4Gq1bnpuZNVTjj0KEbkb/XJbTUTm\n2R0qgx6Gcjnbtp3IlL/jjjraSFw5nlE4eB/hn2kj4a7DTuPt0sNdpoXBcP0kJCRw5coVQkJCEBGW\nLFnCrl27GDhwoPHNVALIbejpHLAfSAQO2JXHAdMKUyln2bs3s+O/bt1qwdWz8HYdFvp8pOclPss4\n7o7DToeBBXb5t3ISNBjclI0bN/Lss89Sp04dNm/ejIjQoEED04soQeRoKJRSvwO/i8j/KaUSi1Cn\n3Em1QnwyBPiwfPn9TJ/emZ9/PsX27ae46666EBaSYSTscMfexL3ABru82S9hKE5ERUUxbtw4Pv9c\nz7AFBgZy8eJFs6u6BOLMZHY1EZkFNMbOH51S6pZC0yo3ouIhdBmU8UFCAqj7cmfqDm7B4MEt4OIh\nIPMKJ3fsRQCcILOReAuzX8JQPLBYLCxevJjnn3+euLg4SpcuzcyZMxkzZgxeXsU/xI0hO878V1cC\nLwNzgXuAJ3HlfGuyBXyA2GSIvaQDF6VxYEUmUXc1EqlAbbt8LOCemhoMmbFarXTt2pWff/4ZgD59\n+rBgwQJq1qzpYs0MhYkzLjz8lVLfACiljiqlnkcbDNeQmmUePcRuIem+sMwb69wU+0Gw1zBGwlB8\n8PDwoEePHtSoUYO1a9eyZs0aYyRuApzpUSSJiAdwVERGAFG48tmmAE8Bi61TUzVA/z22AZJjCS/l\n3hvrvrVLNwQm5yRoMLgBSik+/fRTvLy86NevHwBTp05lwoQJBAQEuFg7Q1HhjKEYj97/NQaYBQQB\nQwtTqVxpXB52joKYRLhwDQJ84Go0rLk3k5g7DjslA3fZ5Q+6ShGDwQmOHj3KqFGj2LRpExUrVqR7\n9+6ULVsWX19ffH19Xa2eoQjJ01AopX61JeOAQQAiUq0wlcqL5FQrz73yIx07VufWAG+qbrjNleo4\njf1akN0u08JgyJ2kpCTmzJnDrFmzSExMpGzZssyaNYugoCBXq2ZwEbkaChFpB1QDflJKXRCRJmhX\nHt2B6kWgn0MOH77A3Lm/AFAjOIaTzx/TB2reAeddpVXuTEJbWoAGgEu2tRsMebB161ZGjhzJoUN6\nBeGgQYOYO3culSpVcrFmBleS42S2iLwC/B8wEPhaRF4Cvgf2Aa5ZGmvj8OGMeBQv3PlDenphKZe7\nn3LI74B99IsDOQkaDC7EYrEwatQoDh06RIMGDdiyZQurVq0yRsKQa4/iAaCFUuqaiJQDTgHNlFLH\nika1nDl27HJ6elCbfTpRo1u6Pyd3m8i2d5R1BjCOlQ3ugtVqJTExEX9/fzw9PVm6dCk//PADU6ZM\nMfMQhnRyMxSJSqlrAEqpSyLylzsYCYAmTSoyZEhLYqKO4+dt0YV1H4ALOulOE9kb7dJvAlVcpYjB\nkIXw8HBGjBhBw4YNeeeddwDo2rUrXbt2dbFmBncjN0NRR0TSxnIECLXLo5R60PFphcy5BO69lMK9\n/ZpC9Iu2AK1A48Hwa65nuoRedunRLtPCYMjg6tWrzJw5k3nz5pGamsrx48e5fPkyZcvmESnScNOS\nm6HolyW/qDAVcZoz8TDhexALTLUNO7UYAaXKAZdcqlpWdtmll7tMC4Mhgy+//JLRo0dz8uRJRIRR\no0Yxa9YsgoOD8z7ZcNOSm1PA74pSkXzTwU69fyzIWc6FtLdLP+0yLQwGSE1NpX///qxerQcFWrZs\nyVtvvUX79u3zONNgcM6Fh3vimWqX9nGdHjlgsUuPdZkWBoPGy8uLoKAgAgICmD9/Prt27TJGwuA0\nhWooRKSniBwWkSMi4jCGhYg8IiJ/isgBEfkwz0or+MOjjaCLbZq48ysFqnNBYCVzV222qxQx3NT8\n+uuv/PprxsTdnDlzOHjwIOPGjTNeXg35wmlDISL5WisnIp7AYrQDwcbAoyLSOItMfWA60Ekp1QQY\nl2fF1QJgXqeMfBn3c0g2MkveRAk2FCUxMTGMHDmSW2+9lSeffJLk5GQAypcvT/XqLtsnayjG5Gko\nRKS9iIQDf9vyLUTkTSfqbg8cUUodU0olAx+j92bYMwxYrJS6DKCUOpdXpefOXWVq32fS899EtAJg\n4fq4nE4pUlYCy+zyV12kh+HmQynFhx9+SMOGDQkLC8PT05PevXtjsVjyPtlgyAVn+p8LgfuALwCU\nUvtE5B9OnFcNvUkvjUigQxaZWwBE5Gf0PrSXlFJf51ZpcrKFjuV3AnDoXHl2J57nsKU64SdTANdv\ntnvSLn0O8HeVIoabir///ptRo0bx7bfaP3GnTp0ICwujadOmLtbMUBJwxlB4KKVOZAmQXlCvKF5A\nfaAb2nfUDyLSTCkVYy8kIsOB4QClS1eja13twmPtgYZUuN+f3XZGwpWb7R6zS/8EVHSVIoabipSU\nFLp3705kZCTlypXjtdde48knn8TDo/iuVTG4F858k06JSHtAiYiniIwD/nLivCighl2+uq3Mnkhg\nnVIqRSl13FZv/awVKaWWKaXaKqXaenn5UM5fh/DeeKgeFSpkvLO70khsB+xDJnXKSdBgKCCU0jFZ\nvL29mTVrFkOGDOHQoUM89dRTxkgYChRnvk0jgQlATSAa6Ej2+VpH7ALqi0ioiPgAA4B1WWS+QPcm\nEJEK6KGoXN2E1KpeKj39zHNDad/epR7PAUgis2G44ipFDDcF0dHRDBo0iJdffjm9bPDgwaxYsYKK\nFU0/1lDwODP0lKqUGpDfipVSqSIyGvgGPf/wrlLqgIjMBHYrpdbZjvUQkT/Rw1mTlVIXc64VvM9k\n+BF/dEgXW8xs1+3IvkbmeYhlQBkX6WIo2VitVpYvX860adOIiYkhODiYcePGERjoPr7NDCUTZwzF\nLhE5DHwCrFZKOb28SCm1AdiQpexfdmmF7q1McLZO/WgGjtxuMxKu5QW79IPoZVwGQ0Gzb98+RowY\nwY4dOwDo2bMnixcvNkbCUCTkOfSklKoLvIyOtRMuIl+ISL57GAWGl564xjfZZSrYs9Au/T+XaWEo\nqaSkpDBp0iTatGnDjh07CAkJ4dNPP2XDhg3UqVPH1eoZbhKcmvFSSm1XSo1Bh1aIRQc0ci2xLo2d\nBMDXgM1s8YErFTGUWLy8vPj999+xWq3885//5ODBgzz88MOIG/SmDTcPeQ49iUgAeqPcAKARsBZw\nXZBqnyT9d2BPl6kA2lreY5d/1FWKGEocJ0+exGKxEBoaiogQFhbGlStXaNu2ratVM9ykONOj2I9e\n6fSaUqqeUmqiUsqFkR/0m9T5eh1ITbW6TIu+dumdFGfvigZ3ISUlhblz59KoUSOGDRuWvvy1fv36\nxkgYXIozk9l1lFKueyJnxfbjCamzkl73NuLO4fcVuQoXgC22dFWgXZFrYChp/PLLL4wYMYI//vgD\ngHLlypGQkEDp0qVdrJnBkIuhEJHXlVITgf+JiMp63GUR7gQsVsFi9aRCBX+XuO6YY5f+o8haNZRE\nLl++zLRp01i2THsICw0NZfHixdxzzz15nGkwFB259Sg+sf11j8h2dnh6aLtVsaJ/+g6KotyV/Zrt\nb1ugfJG1aihpJCUl0bJlS06ePIm3tzeTJ0/mueeew9/feAgzuBe5RbjbaUs2UkplMha2jXQujYBX\nsaI/lSsHFPlWO/u1JmFF3LahZOHr68tTTz3Fd999x9KlS2ncuHHeJxkMLkDSJsxyFBDZo5RqnaXs\nd6VUq0LVLAfa1hC1e0oFeOg4hAQwbIk2FctHlSv0tncAt9rS3oB77OQwFBcSExN55ZVXaNCgAY89\npl1Ipqam4unpaZa7GgodEflNKXVdqyJym6Poj14SGyoiq+0OBQIxjs8qIi4mw/zd8Fq3Im32bbu0\nMRKG/LB582ZGjRrFkSNHqFSpEn379qVUqVIm0pyhWJDbt3QncBHt9XWxXXkc8HthKpUnVk/wKtoF\nqQp4x5Yu+nVWhuLK2bNnmTBhAh99pH0LN2nShLCwMEqVKpXHmQaD+5DbHMVx4DjwbdGp4yRKwMez\nSJv80i49vUhbNhRHLBYLb731FjNmzODKlSuUKlWKF198kfHjx+Pj4+Nq9QyGfJHb0NM2pVRXEbmM\nfqFOP4T251f4kwI54e0DVQKKtMln7dKu25ZuKC5YLBbefPNNrly5Qq9evVi0aBGhoaGuVstguC5y\nG3pKC3daoSgUyRfVg2BoiyKNkx1p+zukyFo0FDfi4uKwWCwEBwfj4+PD8uXLiY6O5sEHHzST1YZi\nTY4D/Xa7sWsAnkopC3rRzzOAa7eLXj7MSy9tLbLNdtfs0mbYyZAVpRSrV6+mUaNGTJw4Mb28c+fO\n9OvXzxgJQ7HHmRnhL9BhUOsCK9ChSj8sVK3yYE9kFf79723p+cLebGe//cn1PmsN7kRERAS9e/em\nX79+REVFsX//fhITE12tlsFQoDhjKKxKqRR0XJ43lVLjAZfGH7WoolvxtM8uXbnIWjW4OykpKbz6\n6qs0btyY9evXU6ZMGRYtWsT27dvx8/NztXoGQ4HiVChUEXkYGAT0sZUVnWMlB6RaPPD3LxoV3rdL\nny2SFg3uTkJCAh07diQ8PByAAQMGMG/ePEJCQlysmcFQODhjKIYCo9Buxo+JSCjwUeGqlTs1a5fj\npZe68lcRtPW67W+3ImjLUDzw9/enbdu2JCQksGTJEnr06OFqlQyGQiVPFx4AIuIF1LNljyilUgtV\nq1xoW0PU7pHNodsGhu3Vm5YKy33HT0AXW3oH0KFQWjG4O0opVq1aRd26dencuTMAV65cwcfHx2yc\nMxQbCsWFh13lXdAjMFHoPRRVRGSQUurn62mwQDh7jYV/FP5Kki52aWMkbk4OHjzIyJEj2bZtG40a\nNWLv3r34+PgQFBTkatUMhiLDmaGn+UAvpdSfACLSCG04XBdyy+pBuFVPGBbW0tgVdum5hdKCwZ25\ndu0as2bN4rXXXiMlJYWKFSsyffp0vL1dOj1nMLgEZwyFT5qRAFBKHRQR1/ogqHAmPVkYS2MVemIm\njYk5CRpKJF9//TXPPvssx44dA2DYsGHMnj2bcuVc54zAYHAlzhiKPSISBnxgyw/E1U4By7fOW+YG\n+NwuvbtQWzK4G/Hx8QwaNIgLFy7QtGlTwsLC6NSpk6vVMhhcijOGYgQwBphiy/8IvFloGjnBQv8X\nIanw6n/E9tcDaFN4zRjcBIvFgtVqxdvbm4CAABYsWEBkZCTjx483Q00GA3kYChFpBtQF1iilXstN\ntigJT2oOFM78xIt26bcKvHaDu/Hbb7/xzDPP8MADD/DCCy8ApAcVMhgMmhy3OIvIDLT7joHAZhEZ\nmpOsqyiM+Yn/2KWfLvDaDe5CbGwsY8eOpX379vz222+8//77pKSkuFotg8Etyc0XxkCguVLqYaAd\nMLJoVHIdyWT4U//alYoYCg2lFJ999hkNGzZk4cKFiAgTJkxgz549ZpjJYMiB3IaekpRSVwGUUudF\npGhDyrkAX7u02Wtb8oiLi6N///5s3LgRgA4dOhAWFkbLli1drJnB4N7kZijq2MXKFqCufexspdSD\nhapZEbPLLt0UfcGGkkVAQABJSUkEBQUxe/Zshg8fjodHiX//MRhumNwMRb8s+UWFqYirGWiX3usy\nLQwFzQ8//EBISAj169dHRHj33Xfx8/OjcmXjC9hgcJbcYmZ/V5SKuJIE4G9b+jGgaKNxGwqDCxcu\nMGXKFFasWMEdd9zB5s2bERFq1arlatUMhmKH6XcDrezSK12lhKFAsFqtvPvuuzRo0IAVK1bg4+ND\nly5dsFgsrlbNYCi2FKqhEJGeInJYRI6IyLRc5PqJiBKRIvcfFQ/p7spvx8WBNgw3xIEDB+jWrRtP\nPfUUly5d4o477iA8PJwXX3wRLy9n9pYaDAZHOP3rERFfpZTT+6FFxBNYDNwFRAK7RGSdvd8om1wg\nMBb41dm6CxL7nRjfukIBQ4Fw5coVOnbsSHx8PJUqVWLevHk89thjJl61wVAA5NmjEJH2IhKObRhf\nRFqIiDMuPNqjY1ccU0olAx8DDziQ+w/wKuDSQMOdMb2J4khaPJWgoCCmTp3KiBEjOHToEAMHDjRG\nwmAoIJzpUSwE7kPv0kYptU9E/uHEedWAU3b5SLKEdRCR1kANpdRXIjI5p4pEZDgwHKBNdSdadhL7\nXdimN+GYlJQUIiMjSUx0qR3PRmpqKpcvX6ZUqVIEBAQA0K+fXqh39uxZzp41gWsNNyd+fn5Ur169\nQDeQOmMoPJRSJ7K8nd3wzKBtA988YEheskqpZcAygJo16+Qdks9J/mWX9s1R6uYmMjKSwMBAateu\n7RZv6Eopzp07R1RUFP7+/vj6+tKwYUO30M1gcDVKKS5evEhkZCShoaEFVq8zhuKUiLQHlG3e4Z/g\nVLjqKKCGXb66rSyNQPTetq22H3kVYJ2I9FZK5ejd+5qU0SdbrwLXHx/A3tpsu+5aSj6JiYluYySu\nXr3KiRMnSEhIACA4OJiaNWu6hW4GgzsgIpQvX57z588XaL3OGIqR6OGnmkA0epTGGb9Pu4D6IhKK\nNhAD0NsUAFBKXQEqpOVFZCswKTcjYU/PW5KdEcuRcXbp22+oppKPqx/EFouFqKgozp07B4CPjw81\na9YkODjYpXoZDO5IYfxe8zQUSqlz6Id8vlBKpYrIaOAb9B62d5VSB0RkJrBbKbUu39ra0aN5les+\nV6Etn6F4ICLExsYCUKVKFUJCQvD0NNsiDYaiwplVT8tFZFnWjzOVK6U2KKVuUUrVVUrNspX9y5GR\nUEp1c7Y3AcCJWKdFs/K9XfrkdddiKEwSExNJTU0FwMPDg9DQUBo3bkz16tUdGol169Yxe/bsolbT\n7di6dStBQUG0bNmShg0bMmnSpEzHv/jiC5o3b06jRo1o1qwZX3zxRabjc+fOpWHDhrRs2ZJ27dqx\natWqolTfKd544w231CuNpKQk+vfvT7169ejQoQMREREO5RYsWEDTpk1p0qQJb7zxRnp5//79admy\nJS1btqR27drpTivDw8MZMmRIEVxBdpwZerJfEOQH9CXzaibXcANbBZ+yS9fIUcrgkIpZXH6dH+1Y\nbtV+mLg1Iz+oMczrnmf1VquVs2fPcubMGcqXL0/t2rUBKF26dK7n9e7dm969e+dZP+gJP6WUyxwC\npqamFuoGwC5durB+/XyibjIAACAASURBVHquXbtGq1at6Nu3L506dWLfvn1MmjSJzZs3ExoayvHj\nx7nrrruoU6cOzZs3JywsjM2bN7Nz507KlClDbGwsa9asKVDdLBbLDfUGU1NTeffdd9mzZ0++zinK\nDZfvvPMOZcuW5ciRI3z88cdMnTqVTz75JJPM/v37Wb58OTt37sTHx4eePXty3333Ua9evUyyEydO\nJCgoCIBmzZoRGRnJyZMnqVmzZpFdDzjxuFVKfWL3eQ94EHeIEHqd43BWIMKWfioXOUPRExcXx59/\n/snp06fTH+bHjx+nYcOGDBkyhFtuuYWBAwfy7bff0qlTJ+rXr8/OnTsBWLlyJaNHa6MVHR1N3759\nadGiBS1atGD79u1ERETQoEEDBg8eTNOmTTl16hQfffQRzZo1o2nTpkydOtWhThEREXTp0oXWrVvT\nunVrtm/fDsCAAQP46quv0uWGDBnC559/jsViYfLkybRr147mzZvz1ls6TuLWrVvp0qULvXv3pnHj\nxgD06dOHNm3a0KRJE5Yty+ikv/POO9xyyy20b9+eYcOGpV/X+fPn6devH+3ataNdu3b8/PPPud7P\nUqVK0bJlS6Ki9BqSuXPnMmPGjPTVMKGhoUyfPp05c+YA8N///pelS5dSpoxeMFKmTBmeeOKJbPUe\nOXKEO++8kxYtWtC6dWuOHj3K1q1bue+++9JlRo8ezcqVKwGoXbs2U6dOpXXr1syZM4f27dtnur/N\nmjUDdLTBrl270qZNG+6++27OnDmTre0tW7bQunXr9Af/8uXLadeuHS1atKBfv37pCx2GDBnCiBEj\n6NChA1OmTOHq1asMHTqU9u3b06pVK9auXZvr//dGWLt2bfp9e+ihh/juu+/S9/ukcfDgQTp06IC/\nvz9eXl507dqV1atXZ5JRSvHpp5/y6KOPppfdf//9fPzxxzesY75J+0E6+0GHRj2a3/MK6lOhZgv1\n9OKLSkVcUdfDJrvK4q+rhpuLP//8M3NBhTczf3LivfDMcuO/y1E0OTlZHTv2/+2deVxU1fvHPwdc\nkMwwCSMQFEG2WViEQFNcEsidVNQ0l9RcM01NTSxTf7lUmuaaaeaS+JXcUjNDcQ0TTXJBgxJEXEEW\nWWQZ5vn9cYfLDDPAgMAAnvfrdV/Mvffcc545c7nPPdvnuUVRUVEUFRVFV69epYwM4feNj48nY2Nj\nunLlChUWFpKHhweNHj2alEol7d+/n/r160dERD/88ANNnjyZiIiCg4Np5cqVRESkUCgoPT2d4uPj\niTFGkZGRRER09+5datWqFT169IgKCgqoa9eutG/fPi3bsrOz6enTp0REFBsbS56enkREtHfvXhox\nYgQREeXl5ZG1tTXl5OTQxo0badGiRURElJubS56ennTr1i2KiIggU1NTunXrlpj348ePiYgoJyeH\nXF1dKSUlhe7evUu2trb0+PFjys/PpzfeeEP8XkOHDqUzZ84QEdHt27fJyclJy96IiAjq1asXERGl\npqaSh4cH3b9/n4iI3N3dKTo6WiN9dHQ0ubu7U0ZGBpmZmZX6G6nj7e1Ne/fuJSKip0+fUnZ2tka5\nRESTJ0+mH374gYiIbG1tadmyZeI5uVwu1sPSpUtp0aJFlJ+fT76+vvTo0SMiIgoNDaXRo0drlf3p\np5/S6tWrxf2UlBTx87x588RzI0eOpF69epFCoSAiorlz59L27duJiCgtLY0cHBwoKyur1N+3JG+8\n8QbJ5XKt7ffff9dK6+rqSnfu3BH37ezsKDk5WSNNTEwMOTg4UEpKCmVnZ5OPjw9NmTJFI82pU6e0\n7Dl79iz17t1bp40l8y8JhLHhSj13y22PMcbSUDyb1AhAKoBSdZtqDNtmlbpMfVS+7M4MTk1QUFCA\n69evQ6FQgDEGS0tLvPrqqxrdQm3atBHfOl1dXdG9e3cwxiCVSnX2/544cULswzY2NsZLL72EtLQ0\n2NrawsfHBwAQFRWFLl264JVXXgEADBs2DKdPn0b//v217JsyZQqio6NhbGyM2FhhZvhbb72FDz/8\nEHl5eTh69Cg6d+6MJk2a4NixY7hy5QrCwsIACNIicXFxaNSoEby9vTXmtq9evVrs2rlz5w7i4uLw\n4MED+Pn54eWXhanfgwYNEssMDw9HTEyxAs6TJ0+QlZUlLjgs4syZM5DL5YiLi8O0adPw6quVn/hR\nkszMTNy9exdBQUEAhMVd+jB48GDxc3BwMHbv3o05c+Zg9+7d2L17N/755x9cu3YNPXr0ACB0UVla\nWmrlc//+fTg7O4v7165dQ0hICNLT05GVlYWAgADx3KBBg8RurmPHjuHgwYP46quvAAhjYImJiXjt\ntdd0/r4lOXPmjF7fU1+cnZ0xe/Zs+Pv744UXXoCbm5tWl9yuXbs0WhMAYGFhgXv37lWpLfpQpqNg\nwjwrOYrXPyhVnsngRETEo2vXii8oSVX9HVpmKk6plDYmUZIREmErh4YNG8LMzAz5+fmwsbHR+eBp\n3Lh4OaSRkZG4b2RkJA5460N54xwAsG/fPnz++ecAgO+//x6HDh1Cy5Yt8ffff0OpVIr2mZiYoEuX\nLvjtt9+we/duDBkivIIQEb799luNBxYgdD2pl3/y5EmEh4cjMjISpqam6NKlS7mr35VKJc6fP1/u\nw7lojCI+Ph4+Pj4IDg6Gm5sbXFxccOnSJcjlcjHtpUuX4OrqimbNmqFp06a4desW7Ozsyq2nkjRo\n0ABKpVLcL/ld1L/74MGDMWjQILz99ttgjMHBwQFXr16Fq6srIiMjyyynSZMmGnmPGjUK+/fvh1wu\nx9atW3Hy5EmdZRIRfv75Zzg6Omrkt2DBAp2/b0k6deqEzMxMreNfffUV3nzzTY1jVlZWuHPnDqyt\nraFQKJCRkYEWLVpoXTtmzBiMGSN0gH/yySewti6WnVAoFNi7dy8uXbqkcU1ubi6aNGmi08bqpMwx\nCpVTOEJEhaqtVjgJAEhNfVrha9QfcVuqzhROBSgsLERSUpLGP52NjQ0cHBz0fjstj+7du2P9+vVi\neRkZGVppvL29cerUKaSkpKCwsBC7du2Cn58fgoKCEB0djejoaLRv3x4ZGRmwtLSEkZERtm/friFX\nPnjwYPzwww84c+YMAgMDAQABAQFYv349CgoKAACxsbHIzs7WKj8jIwPNmzeHqakpbt68ifPnzwMA\nvLy8cOrUKaSlpUGhUODnn38Wr/H398e33xbLrEVHlx1iq02bNpgzZw6WLVsGAJg5cyaWLFkitsIS\nEhLwxRdfYMaMGQCAuXPnYvLkyeJU5KysLK3ZRS+++CKsra3F2VJ5eXnIycmBra0tYmJikJeXh/T0\ndBw/Xno4m7Zt28LY2BiLFi0SWxqOjo5ITk4WHUVRS7Mkzs7O+Pfff8X9zMxMWFpaoqCgADt37iy1\nzICAAHz77bfiWMHly5cBoMzfV50zZ86I94X6VtJJAMLEih9//BEAEBYWhm7duulc21C0LigxMRF7\n9+7FO++Iy8wQHh4OJycnDecBCPeTRFL+C1hVo8+0j2jGmHv5yWoWI6OKD2avVftcNY8kTkVIT0/H\n9evX8eDBAyQmJor/tEZGRlW6SGjVqlWIiIiAVCqFp6enRndNEZaWlli6dCm6du0KuVwOT09P9Oun\nrVk5adIk/Pjjj5DL5bh586bGW6q/vz9OnTqFN998E40aNQIAjB07Fi4uLvDw8IBEIsH48eN1tnoC\nAwOhUCjg7OyMOXPmiF1iVlZW+OSTT+Dt7Y2OHTuidevW4qyX1atX4+LFi5DJZHBxccGGDRvKrYsJ\nEybg9OnTSEhIgJubG5YtW4Y+ffrAyckJffr0wfLly8XplxMnTkTXrl3h5eUFiUSCTp066ZwZtn37\ndqxevRoymQwdOnTAgwcP0KpVKwQHB0MikSA4OBju7mU/MgYPHowdO3YgODgYgLCIMiwsDLNnz4Zc\nLoebm5vOgeW33noLp0+fFvcXLVqE119/HR07doSTk1Op5c2fPx8FBQWQyWRwdXXF/PnzAZT9+1aW\nMWPG4PHjx7C3t8eKFSvEadv37t1Dz549xXQDBgyAi4sL+vTpg7Vr12osIA0NDdXqdgKAiIgI9OrV\n65ltrCistEYCY6wBCYvmrgNwBPAfgGwI4aSJiDxqzsxiXrF1o/6zT6C31SP061f6jVGSGACuqs9/\nAPCtDuPqITdu3NDoE64M+fn5SExMRHp6OgDA1NQUtra2VfJPWR8pGndQKBQICgrCe++9J44JcICg\noCAsX74cDg4OhjalRsnLy4Ofnx/Onj1b7nRfXf+3jLFLRFSpmD9llXYBgAcA/San1zBvvFGxecTv\nqH3mTqJmICI8fPgQ9+7dg1KphJGREaysrGBhYWFwWZDazIIFCxAeHo7c3Fz4+/trDbA/7yxduhT3\n799/7hxFYmIili5dapAgXGWVyACAiP6rIVsqRIv0PKCFqd7p/1b93Vg95nB0UFhYiAcPHkCpVKJ5\n8+Zo1aqV2EXDKZ2imTkc3Tg6OmoNSj8PODg4GMw5luUoXmGMfVTaSSJaUQ326E+u/krn6msih1W9\nJRw1FAoFjIyMYGRkhAYNGsDW1haMMS7gx+HUYcpyFMYAmkLVsqjL8LUT1Q8RITU1FXfu3IGFhQVe\ne+01AEDz5s0NbBmHw3lWynIU94loYY1ZUlH0dF/qi+IPVYshnNzcXNy+fVuc8pqVlQUi4uMQHE49\nodwxitqI1CQeaCMvPyGAQWqfa35SWf1GXcCPiNCgQQNYW1ujRYsW3ElwOPWIstZRdK8xKypIsMUh\nZKutAi2NcAgigACgW/KNU1mKFkQVCfi1aNECrq6uMDc3506iFmFsbAw3NzdIJBL06dNHnKIMANev\nX0e3bt3g6OgIBwcHLFq0SEO87tdff0X79u3h4uICd3d3cWFebeLy5cvi6ubaypIlS2Bvbw9HR0f8\n9ttvOtMUiR1KJBKMHDlSXHujLhvv5uaGhQuFTp78/Hx07ty5QsoEz0RlRaIMtZnbyGlapwA6dSqh\nHFkszQsV5abm6KKkuBiwQGO7evUqPXnyROu6jRsvaqQbN+5gTZlcYYqE4+pj+S+88IL4ecSIEbR4\n8WIiEoQI7ezs6LfffiMiQfwwMDCQ1qxZQ0REV69eJTs7O7px44Zo47p166rUtoKCgmfOY+DAgVpC\nh9VdZkW4fv06yWQyys3NpVu3bpGdnZ3W711YWEjW1tb0zz//EBHR/Pnz6fvvvyci0hJbVGfBggW0\nY8cOneeqWhTQMIL8zwih/JXZ6mtxz0EYmedUHiLSGYfXxcUFL774YrWVm5CQoJfM+IULF+Dr6wt3\nd3d06NAB//zzDwBhiu7MmTMhkUggk8lECQx16es9e/YgOjoaPj4+kMlkCAoKQlpamk57dEmDb9iw\nAbNmzRLTqEue79ixA97e3nBzc8P48eNFiYimTZtixowZkMvliIyMxMKFC8UV0e+//774Zh8VFQWZ\nTAY3NzfMmjVLlG8oTc68LHx9fUXJ8Z9++gkdO3aEv78/AGER5Jo1a8RVxMuXL8e8efPE1c7GxsaY\nOFE7AnJWVhZGjx4NqVQKmUwmSo6oCxWGhYWJAXdKyn+3bt1ao5Xj4OCAhw8f6iWpnpmZiStXroja\nVaXdA1u3bkXfvn3RrVs3dO8udJR8+eWXYt199tlnYp6lSb9XlgMHDmDIkCFo3Lgx2rRpA3t7e/Ge\nLeLx48do1KgR2rVrBwDo0aOHhnRLafTv379M2ZIqpbIexlCbuY2cPngjkM6dS9TpSYsIVruIU3li\nYmIoOzubYmJiKCoqSqtFURpV1aLQV2Y8IyNDfFv8/fff6e233yYionXr1tGAAQPEc0XS3iWlr6VS\nKZ08eZKIhDe6Dz/8UKc9uqTBHz16RG3bthXTBAYG0pkzZygmJoZ69+5N+fn5REQ0ceJE+vHHH4mI\nCADt3r1bK18iouHDh9PBg0J9ubq60h9//EFERLNnzyZXV1ciolLlzEtS1KJQKBQ0cOBA+vXXX4mI\naPr06fTNN99opTczM6OMjAydkuS6+PjjjzXqKjU1VaNcIqI9e/bQyJEjiUhb/nvq1Km0ZcsWIiI6\nf/48de/enYj0k1Q/ceKE+DsTlX4P/PDDD2RlZSXW8W+//Ubjxo0jpVJJhYWF1KtXLzp16hQR6f59\nSzJt2jSdkuNLlizRSjt58mRR3pyI6L333qM9e/ZopFEqlWRjY0NRUVFinUgkEiISWhQvv/wyyWQy\nCgwMpGvXronXKRQKMjc31yqTyAAy47WRli1fxAsvNCwzzf9Uf62q35x6S1ZWFtLS0kRRu4YNy67z\n6kIfmfGMjAyMHDkScXFxYIyJonzh4eGYMGGCuJq1SL4bKJa+zsjIQHp6Ovz8/AAAI0eOxKBB6tMg\nitElDe7j4wM7OzucP38eDg4OuHnzJjp27Ii1a9fi0qVL8PLyAgA8ffoUFhYWAIQ39AEDBoj5RkRE\nYPny5cjJyUFqaipcXV1FxVJfX0FL4J133sGhQ8LcvdLkzNVlzIvKLApe5OzsLMp4VxXh4eEagXT0\nmQ6tLv89ePBgLFy4EKNHj0ZoaKj4m+gjqX7//n1RJh4o/R4AhLf0ot/+2LFjOHbsmKhHlZWVhbi4\nOHTu3Fnn71tS+XXlypX6VY6eMMYQGhqK6dOnIy8vD/7+/mL9eHh44Pbt22jatCmOHDmC/v37Iy4u\nDoBwDzVq1AiZmZnV2qoH9AuFWuuYN8INaGde6nl1Tc3aG1m3drN//3588MEH2LRpE8zNzWFhYQEr\nKysQ6Tfb7P33PfH++1UTCFEfmfH58+eja9eu2LdvHxISEtClS5dy8y1Pa+rOnTvo06cPAEFcz8nJ\nqVRp8CFDhuB///sfnJycEBQUBMYYiAgjR47EkiVLtPI2MTERHwa5ubmYNGkSLl68iFatWmHBggXl\nSo4T6ZYzL0mTJk0QHR2NnJwcBAQEYO3atZg6dSpcXFw0xPUA4NatW2jatCmaNWsGV1dXLUnyiqA+\noaEsyXFfX1/8+++/SE5Oxv79+xESEgJAP0n1kpLjZd0DJSXH586di/Hjx2vkp6/0+/Tp0xEREaF1\nfMiQIZgzRzNUT5HkeBFJSUmwstJ+ffX19RVjXhw7dkyMi1EUbRAAevbsiUmTJiElJQXm5sLzLy8v\nr8pUl8uiTo5RYE00cOdJqafVdSvLj9LMKcndu3cxZMgQJCUloVGjRnB2doaNjc0zxTqubjIyMsR/\nwKIQnIDwJrlx40bRoaSmpmpd+9JLL6F58+biP+r27dvh5+eHVq1aiXLSEyZMKFUaHBCE6g4cOIBd\nu3aJsSm6d++OsLAwUU46NTUVt2/f1iq/6GFkbm6OrKwssZVgZmaGF198EX/++ScAaLy56ytnXoSp\nqSlWr16Nr7/+GgqFAsOGDcPZs2cRHh4OQGh5TJ06FR9//DEAYNasWfjiiy/EB5ZSqdSpVtujRw+s\nXVusy1w0ttOyZUvcuHEDSqWyzLjbjDEEBQXho48+grOzs/j2ro+keknJ8dLugZIEBARgy5YtyMrK\nAiDc748ePSrz91Vn5cqVOiXHSzoJQJAcDw0NRV5eHuLj4xEXF6cRCraIonskLy8Py5Ytw4QJEwAA\nDx48EMerLly4AKVSKdbR48ePYW5uXiMt/brpKMpY4qEeeWBu9RtSbygoKBBvSCsrK/zf//0fVq9e\njVdffbVOqLx+/PHHmDt3Ltzd3TWmDI4dOxY2NjaQyWSQy+X46aefdF7/448/YtasWZDJZIiOjsan\nn36qlaY0aXBA6HJxdnbG7du3xQeBi4sLFi9eDH9/f8hkMvTo0UNnHGgzMzOMGzcOEokEAQEBYlcV\nIMTPHjduHNzc3JCdnS1KjusrZ66Ou7s7ZDIZdu3ahSZNmuDAgQNYvHgxHB0dIZVK4eXlJQ7Cy2Qy\nfPPNNxg6dCicnZ0hkUhw69YtrTxDQkKQlpYGiUQCuVwuvmkvXboUvXv3RocOHXRGqlOnSHJcPQqe\nPpLqTk5OyMjIEBd6lnYPlMTf3x/vvPMOfH19IZVKMXDgQGRmZpb5+1YWV1dXBAcHw8XFBYGBgVi7\ndq34wtWzZ08xWt2XX34JZ2dnyGQy9OnTB926Ca+4YWFhYt1OnToVoaGhYmutRiXHKzu4YajN3EZO\n9OZgon+KB/80BmzUtnydKTglOXfuHEmlUtq2bZvWOV2DYpyaIzMzU/y8ZMkSmjp1qgGtqX2sWLGC\nNm3aZGgzDEJQUJA4pbYkfHosALRqBjTWHl5Rj6zRHYBhhl7rDqmpqRg/fjw6duyIq1evYt26dWKr\nglM7OHz4sLhg7syZM2IfPkdg4sSJGmNYzwv5+fno37+/OKW2uik1cFFt5RVbN0r+ZTIgG6d1bjiA\nolnFBaijI/U1ABFhx44dmDFjBpKTk9GwYUN8/PHHmDdvnlY83qoIXMThcGqWmgxcVGvZ+dM1+L38\nBNbWzTSOH1P7XCe/WA3w8OFDDB06VOxL9vPzw/r167kz4HA4pVInu56On0jA48c5GseUAIrWDYfX\nuEV1BzMzM9y/fx/m5ubYunUrIiIiuJPgcDhlUidfvAlMS3guTu2zX82aU+v5/fff4eHhgRYtWqBx\n48bYs2cPLC0ttRYScTgcji7qZItCSdrTY9ep/jZEHfV+1cD9+/cxdOhQ+Pv7Y/bsYv1ciUTCnQSH\nw9GbOukohg+T4bXXNJesr1b9rZq1wHWbwsJCrFu3Dk5OTggNDUWTJk3g6OhYZ2c01Xep7NIYOnQo\nZDKZ3pIR6vIWVQkRYerUqbC3t4dMJsNff/2lM93Tp0/h5+cnCh/WRo4ePQpHR0fY29uLAoglSUxM\nRNeuXcV1J0eOHBHPXblyBb6+vnB1dYVUKhUXS7755pulCknWCyo7r9ZQm7mNnGjubKKH2eL84HS1\nBDd1zip+frh06RJ5eXkRhNnC1KtXL4qPj690frVhHUV9l8rWxf379zWEBvVBvZ6qksOHD1NgYCAp\nlUqKjIwkb29vnenWrFmjU2iwNIpE+WoKhUJBdnZ29N9//1FeXh7JZDK6fv26Vrpx48aJ98n169fJ\n1taWiITfWiqVimKJKSkporjh1q1bxfuyNsDXUQDApf+AzHxxd5naKceat6bWkJCQAG9vb0RFRcHK\nygo///wzfvnlF7Ru3bpK8mfVtFWE+iaVnZubK5bt7u4uzkbz9/fH3bt34ebmJkqLFPHw4UMEBQVB\nLpdDLpfjjz/+0Po+3bt3h4eHB6RSKQ4cOAAAyM7ORq9evSCXyyGRSLB7924AwJw5c+Di4gKZTIaZ\nM2dq2XjgwAGMGDECjDH4+PggPT1d5wrznTt3ol+/fmXakJCQAEdHR4wYMQISiQR37tzBsWPH4Ovr\nCw8PDwwaNEiU1ihNer2yXLhwAfb29rCzs0OjRo0wZMgQ0S51GGN48kSQCMrIyBDjvx87dkxc4Q8A\nLVq0EFdZ9+3bF7t27Xom+2o1lfUw+mwAAgH8A+BfAHN0nP8IQuiIKwCOA7AtL09zGzlRx/eI/k0r\n9pSqrXklvW99YuzYsTR9+nSdwYQqg/qbSXXdKOVRn6Wyv/rqKxo9ejQREd24cYNatWpFT58+pfj4\neFFSvCTBwcG0cuVKsU7S09M17C0oKKCMjAwiIkpOTqa2bduSUqmksLAwGjt2rJhPeno6paSkULt2\n7UipVBIRUVpaGpWkV69e4vcgIurWrZsoiV1EXl4etWzZUtwvzYb4+HhijFFkZKR4rlOnTpSVlUVE\nREuXLqXPP/+ciEqXXldnx44dOiW/BwwYoJV2z549NGbMGHF/27ZtNHnyZK109+7dI4lEQlZWVmRm\nZkYXL14kIqKVK1fS8OHDyd/fn9zd3TVk6omI7O3tdcqSG4I6IzPOGDMGsBZADwBJAKIYYweJSD2m\n0GUA7YkohzE2EcByAIO1c9PKXeerqLYkV/0mISEBH3zwAWbOnClKZH/33XfVForUUCMc9Vkq++zZ\ns/jggw8ACNpFtra2iI2N1VANLcmJEyewbZugi2xsbCzqPxVBRPjkk09w+vRpGBkZ4e7du3j48CGk\nUilmzJiB2bNno3fv3ujUqRMUCgVMTEwwZswY9O7dG7179y73u+siJSUFZmZm5doAALa2tqKO0vnz\n5xETE4OOHTsCEFYcF8mq65JeL1LzLWLYsGEYNmxYpWwujV27dmHUqFGYMWMGIiMj8e677+LatWtQ\nKBQ4e/YsoqKiYGpqiu7du8PT01MMhmRhYYF79+7Vy4ki1dn15A3gXyK6RUT5AEIB9FNPQEQRRFS0\nIOI8AGu9ch4pAcyFFcT5aofHPqvFdYSCggIsW7YMLi4uOHTokIZqZX2MV10klX379m0QkahW6uLi\ngkuXLmmk1SWVXVkqK5X99ttvAyiWyi5SF7179261DTirs3PnTiQnJ+PSpUuIjo5Gy5YtkZubi3bt\n2uGvv/6CVCpFSEgIFi5ciAYNGuDChQsYOHAgDh06hMDAQK389JHKLin5XZoNgLbkd48ePcQ6iomJ\nwebNm0Xp9bCwMFy9ehXjxo3TKfm9c+dOMZ60+jZw4MBKfQ9AEGIMDg4GIPy2ubm5SElJgbW1NTp3\n7gxzc3OYmpqiZ8+eGgP7ubm5WsoG9YXqdBRWAO6o7Seh7DhCYwD8qusEY+x9xthFxthFAEAXW6CZ\noO+i3iv4so5r6xtnz56Fu7s75syZg6dPn2LIkCHYu3evoc2qEeqjVHanTp3EcJaxsbFITEyEo2PZ\nI23du3fH+vXrAQgz3DIyMjTOZ2RkwMLCAg0bNkRERIQobX7v3j2Ymppi+PDhmDVrFv766y9kZWUh\nIyMDPXv2xMqVK/H3339rlde3b19s27YNRITz58/jpZde0lKEbd68OQoLC8WHeWk2lMTHxwfnzp0T\n5cKzs7MRGxtbqvR6SYYNG6ZT8ltXei8vL8TFxSE+Ph75+fkIDQ1F3759tdLZ2Njg+PHjAAQpjNzc\nXLzyyisICAjAhEsORwAAG81JREFU1atXkZOTA4VCgVOnTsHFxQWA4PAePHhQZeOBtY7K9lmVtwEY\nCOB7tf13AawpJe1wCC2KxuXla24jpwHyoXTzZjIREbVVnbCoWBdenSM1NZXGjBkjzmZq27atONun\nOqlts56IiHr37i0q3V65coX8/PyoXbt21LZtW1qwYIHY305E9Msvv5CHhwc5OTmRs7MzzZo1Syv/\nzMxMGjFiBLm6upJMJqOff/6ZiIQ+bTs7O3r99ddp8uTJGmMUJcNZCmFiQVu3bhWPJScnU3BwMEml\nUnJ2dqbx48drlf306VMaNWoUSSQScnNzoxMnThARlTlG8eDBA+rbty9JJBKSy+ViqNSiekpOTiYf\nHx+SSCQ0atQocnJyovj4eDp69ChJpVKSy+XUvn17ioqKonv37pGXlxdJpVKSSCQa9hehVCpp0qRJ\nZGdnRxKJRGt8ooj33nuPfv/99zJt0PW9jh8/Tu3btyepVEpSqZQOHDhARETz5s0jOzs76tChA40a\nNYo+++wzneVWhMOHD5ODgwPZ2dlpzFKaP3++WO7169epQ4cOJJPJSC6Xa/yfbd++nVxcXMjV1VXj\nXoqKitIIy2poqnqMojodhS+A39T25wKYqyPdmwBuALDQJ19zGzn1cRlCN28mk1LtxOZnqtbaT0pK\nCpmbm1PDhg1p/vz5lJOTUyPl1gZHwakbXLp0iYYPH25oMwzC1KlTKTw83NBmiNSZwWwAUQAcGGNt\nANwFMATAO+oJGGPuADYCCCSiR/pmXCThoT7gMaIKDK5t3Lx5E23atEHjxo3RokUL7Ny5EzY2NuJ0\nTw6nNuHh4YGuXbuisLCwVkdDrA4kEok4qF0fqbYxCiJSAJgC4DcILYb/EdF1xthCxlhRx+CXAJoC\n2MMYi2aMHdQvb4AxYcoUAJiifsl25OTkYN68eZDJZFi+fLl43N/fnzsJTq3mvffee+6cBACMG6cd\n9qA+Ua3PVyI6AuBIiWOfqn1+szL57vt5MBq0bY4k1X5k5U2sdRw9ehSTJk1CfHw8AGHaIYfD4RiS\nOrkyu+Goo0i5WxxI3t6AtlQV9+7dQ3BwMN566y3Ex8dDKpXi3LlzWLVqlaFN43A4zzl1tsdmrllx\n+ENTA9pRFcTGxqJ9+/bIzMyEqakpFixYgGnTpqFhQx7MlcPhGJ666SiI4bSJ0A8qNbApVYGDgwO8\nvLzwwgsv4Ntvv4Wtra2hTeJwOByROtn1BGaEuIaCo5hnYFMqw5MnTzBt2jRxIRhjDAcPHsTBgwe5\nk9ABlxk3rMz4zZs34evri8aNG+Orr74qNR0RoVu3bqKgXm3k0qVLkEqlsLe3x9SpUzXulSLS0tIQ\nFBQEmUwGb29vXLt2TeN8YWEh3N3dNeROhgwZgri4uJJZ1R8qO6/WUJu5jZxuxx8TD1SN9F3NoFQq\n6X//+x9ZWloSAAoICDC0SeVSG9ZRcJlx/agumfGHDx/ShQsX6JNPPqEvv/yy1HSHDh2iadOmVSjv\nImHFmsLLy4siIyNJqVRSYGAgHTlyRCvNzJkzacGCBUQkCDV269ZN4/zXX39NQ4cOpV69eonHTp48\nqSG4aGi4zDiAH2Mfi59fLCNdbeLWrVvo1asXgoODcf/+ffj4+GDZsmXlX1ib+JpVz1YBuMx4zcuM\nW1hYwMvLq9wxM3WZcQDo378/PD094erqiu+++0483rRpU8yYMQNyuRyRkZG4dOkS/Pz84OnpiYCA\nAFHCfNOmTfDy8oJcLseAAQOQk5OjVWZFuH//Pp48eQIfHx8wxjBixAjs379fK11MTAy6desGQBBq\nTEhIEAUNk5KScPjwYYwdq6ks16lTJ4SHh0OhUDyTjbWVOjlGcfI1QVnT28B26EN+fj6++uorLFq0\nCLm5uTAzM8PSpUsxbtw4GBnVST9tMAoLC3H8+HGMGTMGgNDt5OmpGdOwbdu2yMrKwpMnT3Dt2jW9\nupoWLVqEl156CVevXgUAvSKVJSUl4Y8//oCxsTEKCwuxb98+jB49Gn/++SdsbW3RsmVLvPPOO5g+\nfTreeOMNJCYmIiAgADdu3NDIZ+3atWCM4erVq7h58yb8/f0RGxuLgwcPonfv3jr1oaZOnQo/Pz/s\n27cPhYWFYvyGIkxMTLBv3z40a9YMKSkp8PHxQd++fXH06FG89tprOHz4MABBj+nx48fYt28fbt68\nCcaYhsOrKOfOncPGjRvF/S1btuDll1/G06dP4eXlhQEDBqBFixbIzs7G66+/jq+//hoFBQXw8/PD\ngQMH8Morr2D37t2YN28etmzZgrfffltcnxASEoLNmzeLSrtFREREYPr06Vq2mJqaajnQu3fvwtq6\nWHfU2tpafOlQRy6XY+/evejUqRMuXLiA27dvIykpCS1btsS0adOwfPlyZGZmalxjZGQEe3t7/P33\n31r3ZH2gTjoKamYCQAh2Udu5c+cOFi5ciLy8PAwbNgxff/01WrZsaWizKscMwwiNc5lxTWqjzDgA\npKam4sUXi9v4q1evFsUU79y5g7i4ODHYz4ABAwAA//zzD65duyb+poWFhaLg4LVr1xASEoL09HRk\nZWUhICBAq8yuXbvqdKbPwpw5c/Dhhx/Czc1NbOkZGxvj0KFDsLCwgKenJ06ePKl1XZHMOHcUtQRS\nBaN418B2lEZaWhrMzMzAGEPbtm2xatUq2Nvb1+sl/tVJkcx4Tk4OAgICsHbtWkydOhUuLi44ffq0\nRlpdMuNFEckqSmVlxkNCQgAUy4ybmJhUqvzKoi7x3bBhQ7Ru3VpDZvzIkSMICQlB9+7d8emnn+LC\nhQs4fvw4wsLCsGbNGpw4caJS5TZo0ABKpRJGRkY4efIkwsPDERkZCVNTU3Tp0kWsQxMTE9HJEhFc\nXV0RGam9bHbUqFHYv38/5HI5tm7dqvPhXJEWhZWVFZKSksT90mTGmzVrhh9++EG0r02bNrCzs8Pu\n3btx8OBBHDlyBLm5uXjy5AmGDx+OHTt2AOAy47UOUv0DtzGwHSVRKpXYsmUL7O3txZsHAMaPH8+d\nRBXAZcYFalpmXF8cHR1x69Yt0YbmzZvD1NQUN2/exPnz50u9Jjk5WXQUBQUFuH79OgAgMzMTlpaW\nKCgoEOuoJEUtipJbSScBAJaWlmjWrBnOnz8PIsK2bds0xlSKSE9PR36+EOnm+++/R+fOndGsWTMs\nWbIESUlJSEhIQGhoKLp166bxfx4bGwuJRFKBGqs71ElHoWRGMCVCbVKUuX79Orp06YIxY8YgNTUV\nv/6qM7QG5xlxd3eHTCbDrl270KRJExw4cACLFy+Go6MjpFIpvLy8MGXKFACATCbDN998g6FDh8LZ\n2RkSiUR8kKkTEhKCtLQ0SCQSyOVycUB56dKl6N27Nzp06KAVf6EkgwcPxo4dO8RuJ0Doerl48SJk\nMhlcXFx0OqlJkyZBqVRCKpVi8ODB2Lp1Kxo3bqyVTp1Vq1YhIiICUqkUnp6eGt1bgBCj4eLFi5BK\npdi2bZs4mH/16lV4e3vDzc0Nn3/+OUJCQpCZmYnevXtDJpPhjTfewIoVK7TKe/DgAaytrbFixQos\nXrwY1tbWOqfA9urVS3zrDwwMhEKhgLOzM+bMmSNGtCtJo0aNEBYWhtmzZ0Mul8PNzU18yC9atAiv\nv/46OnbsWGUaZ+vWrcPYsWNhb2+Ptm3b4q233gIAbNiwQfx9bty4AYlEAkdHR/z66696qSM8fPgQ\nTZo0wauvvloldtY6KjtdylCbuY2c3rhzmlooimMOGJLs7GyaM2cONWjQgACQhYUF7dy5UyMmQl2m\nNkyP5dQN7t27R2+++aahzTAIK1asoO+//97QZojUJZnxaqNRYT5Sa0FbKDY2FgEBAUhISABjDBMm\nTMAXX3yh12Aoh1PfsLS0xLhx4/DkyZMyB+PrI2ZmZnj33do6avrs1ElHkdvABJ3ylUBjw3Y+2dra\nwsTEBHK5HBs2bCi1ec3hPC8UxZp+3hg9erShTahWasF7ecUpMGoIZ9T8VE2FQoE1a9bg8WNhwV/j\nxo1x9OhRXLx4kTsJDodTb6mTjoIYg1vjmm0MXbhwAd7e3vjggw8we/Zs8bitrS0aNKiTDTMOh8PR\ni7rpKMBgn55bfsIqICMjA1OmTIGPjw8uX74MGxsbnVPqOBwOp75SJx2FkhmhRX5htZZBRAgNDYWT\nkxPWrl0LY2NjfPzxx4iJiUGfPn2qtWwOh8OpTdRJR0FgaKlDHrgq+fvvvzF06FA8ePAAHTp0wF9/\n/YVly5ZprMjl1AxcZtywMuM7d+6ETCaDVCpFhw4dSl2UR1T/ZcZbt24NqVQKNzc3tG/fXjw+c+bM\nSq9orxNUdl6toTZzGznJHkbTw4dZlZpfXBYlJY+nT59OmzZtosLCwiovq65QG9ZRcJlx/agumfFz\n585RamoqEREdOXKEvL29daZ7HmTGbW1tKTk5WeuahIQE6tGjR/UZXkH4OgoALbLy8aJloyrNMyIi\nApMmTcLGjRvRuXNnANC5SvV5Zty61GrJd9Okl/VO6+vriytXrgAoXWa8S5cumDx5coVkxj/44ANc\nvHgRjDF89tlnGDBgAJo2bSoqs4aFheHQoUPYunUrRo0aBRMTE1y+fBkdO3bE3r17ER0dDTMzMwCC\nzPjZs2dhZGSECRMmIDExEQDwzTffoGPHjhpl5+bmYuLEibh48SIaNGiAFStWoGvXrhoy499++y06\ndeokXvPw4UNMmDBBXGW+fv16dOjQQeP79OvXD2lpaSgoKMDixYvRr18/ZGdnIzg4GElJSSgsLMT8\n+fMxePBgzJkzBwcPHkSDBg3g7++vFZxIPW8fHx8NvSR1du7ciffff1/c79+/P+7cuYPc3Fx8+OGH\n4rmmTZti/PjxCA8Px9q1a9GkSRN89NFHyMrKgrm5ObZu3QpLS0ts2rQJ3333HfLz82Fvb4/t27fD\n1LTygY/VZcYBiDLjRauzi4iJicGcOXMAaMqMlyXmaWtri8ePH+PBgwf1cnV2nXQUKASa5CiAJs8e\nU/rRo0eYNWuWqMa5YsUK0VFwahdcZlzAkDLjmzdv1nqwFvE8yIwzxuDv7w/GGMaPH6/hGD08PHDu\n3DlRGbc+UScdBSkAKJTPlIdSqcTmzZsxe/ZspKWloXHjxggJCcGsWbOqxsh6SEXe/KsSLjOuiaFk\nxiMiIrB582acPXtW5/n6LjMOCL+XlZUVHj16hB49esDJyUl8sSySGa+P1ElH4XvxAeDvUunr4+Pj\nMXz4cPGNw9/fH2vXroW9vX1VmcipQrjMeMWoDpnxK1euYOzYsfj1119FddyS1HeZ8aI8AMEpBAUF\n4cKFC6Kj4DLjtQymrFj4zJI0a9YMsbGxePXVVxEaGoqjR49yJ1EH4DLjAjUtM56YmIi3334b27dv\nR7t27Uq1q77LjGdnZ4uR7bKzs3Hs2DENWfH6LDNu8FlMFd3MbeQ091Y0UX7FZkscPXqUcnNzxf0/\n/viD0tPTK5TH80htm/VERNS7d2/atm0bERFduXKF/Pz8qF27dtS2bVtasGCBhnLvL7/8Qh4eHuTk\n5ETOzs40a9YsrfwzMzNpxIgR5OrqSjKZjH7++WciItqzZw/Z2dnR66+/TpMnT6aRI0cSEdHIkSNp\nz549GnlERUURANq6dat4LDk5mYKDg0kqlZKzszONHz9eq+ynT5/SqFGjSCKRkJubG504cYKIiOLj\n48nV1VVnfTx48ID69u1LEomE5HI5/fHHHxr1lJycTD4+PiSRSGjUqFHk5ORE8fHxdPToUZJKpSSX\ny6l9+/YUFRVF9+7dIy8vL5JKpSSRSDTsL2LMmDFkZmZGcrmc5HI5eXp66rRr4cKFtGnTJiIiys3N\npcDAQHJycqJ+/fqRn58fRUREaNhZxOXLl6lTp04kk8nIxcWFvvvuOyIiWrduHbVu3Zq8vLxoypQp\nYv0/C1FRUeTq6kp2dnY0efJk8V5Zv349rV+/noiEZ4ODgwO1a9eOgoKCxBlf//33H8lkMtHOotl3\nRET5+fnk5ORUbbPgKkpVz3oy+IO/opu5jZzWP/5H7wpLTEyk/v37EwBatGiR3tdxBGqDo+DUDZ5n\nmfG9e/dSSEiIoc0QqWpHUSe7np6w8s1WKBRYsWIFnJ2dsX//fjRt2hQvv2yYwVgO53lAXWb8eUOh\nUNSpxZwVpU4OZtuxsscozp8/jwkTJoj9rQMGDMCqVat0DlxxOJyq43mVGR80aJChTahW6qSjMEHp\njuLPP/9Ehw4dQERo3bo11qxZg169etWgdfUPItKYAcThcGovQi9T1VInHUVhGV1P3t7eCAgIgLu7\nO0JCQp5pJSdHmMr4+PFjtGjRgjsLDqeWQ0R4/PhxlU/JrpOO4qXbTwDnQqChMeLi4jB9+nSsWLEC\n7dq1A2MMhw8fhpFRnRx+qXVYW1sjKSkJycnJhjaFw+HogYmJicYK9KqgTjqKJgvPI2+1DZZuWoUl\nS5YgLy8PJiYmCAsLAwDuJKqQhg0bok2bNoY2g8PhGJBqdRSMsUAAqwAYA/ieiJaWON8YwDYAngAe\nAxhMRAnl5Xs56QZGdPZG7H9xAIR4tcuXL69i6zkcDocDAKw6Bj4AgDFmDCAWQA8ASQCiAAwlohi1\nNJMAyIhoAmNsCIAgIhpcVr4mL7xMeTnCyllnZ2ds2LCBi/hxOBxOOTDGLhFR+/JTalOdfTTeAP4l\noltElA8gFEDJ9fL9APyo+hwGoDsrZ8Q0PycNJsYN8cWnCxEdHc2dBIfD4VQz1dmiGAggkIjGqvbf\nBfA6EU1RS3NNlSZJtf+fKk1KibzeB1Ck5ysBcA0cADAHkFJuqucDXhfF8LoohtdFMY5E9GL5ybSp\nE4PZRPQdgO8AgDF2sbLNp/oGr4tieF0Uw+uiGF4XxTDGLlb22urseroLoJXavrXqmM40jLEGAF6C\nMKjN4XA4nFpCdTqKKAAOjLE2jLFGAIYAOFgizUEAI1WfBwI4QdXVF8bhcDicSlFtXU9EpGCMTQHw\nG4TpsVuI6DpjbCEEFcODADYD2M4Y+xdAKgRnUh7fVZfNdRBeF8XwuiiG10UxvC6KqXRdVNtgNofD\n4XDqB3wJM4fD4XDKhDsKDofD4ZRJrXUUjLFAxtg/jLF/GWNzdJxvzBjbrTr/J2Osdc1bWTPoURcf\nMcZiGGNXGGPHGWO2hrCzJiivLtTSDWCMEWOs3k6N1KcuGGPBqnvjOmPsp5q2sabQ43/EhjEWwRi7\nrPo/6WkIO6sbxtgWxtgj1Ro1XecZY2y1qp6uMMY89Mq4sqHxqnODMPj9HwA7AI0A/A3ApUSaSQA2\nqD4PAbDb0HYbsC66AjBVfZ74PNeFKt2LAE4DOA+gvaHtNuB94QDgMoDmqn0LQ9ttwLr4DsBE1WcX\nAAmGtrua6qIzAA8A10o53xPArwAYAB8Af+qTb21tUVSL/Ecdpdy6IKIIIspR7Z6HsGalPqLPfQEA\niwAsA5Bbk8bVMPrUxTgAa4koDQCI6FEN21hT6FMXBKCZ6vNLAO7VoH01BhGdhjCDtDT6AdhGAucB\nmDHGLMvLt7Y6CisAd9T2k1THdKYhIgWADAAtasS6mkWfulBnDIQ3hvpIuXWhakq3IqLDNWmYAdDn\nvmgHoB1j7Bxj7LxKzbk+ok9dLAAwnDGWBOAIgA9qxrRaR0WfJwDqiIQHRz8YY8MBtAfgZ2hbDAFj\nzAjACgCjDGxKbaEBhO6nLhBamacZY1IiSjeoVYZhKICtRPQ1Y8wXwvotCREpDW1YXaC2tii4/Ecx\n+tQFGGNvApgHoC8R5dWQbTVNeXXxIgTRyJOMsQQIfbAH6+mAtj73RRKAg0RUQETxEGT/HWrIvppE\nn7oYA+B/AEBEkQBMIAgGPm/o9TwpSW11FFz+o5hy64Ix5g5gIwQnUV/7oYFy6oKIMojInIhaE1Fr\nCOM1fYmo0mJotRh9/kf2Q2hNgDFmDqEr6lZNGllD6FMXiQC6AwBjzBmCo3ge4/seBDBCNfvJB0AG\nEd0v76Ja2fVE1Sf/UefQsy6+BNAUwB7VeH4iEfU1mNHVhJ518VygZ138BsCfMRYDoBDALCKqd61u\nPetiBoBNjLHpEAa2R9XHF0vG2C4ILwfmqvGYzwA0BAAi2gBhfKYngH8B5AAYrVe+9bCuOBwOh1OF\n1NauJw6Hw+HUErij4HA4HE6ZcEfB4XA4nDLhjoLD4XA4ZcIdBYfD4XDKhDsKTq2DMVbIGItW21qX\nkbZ1aUqZFSzzpEp99G+V5IVjJfKYwBgbofo8ijH2mtq57xljLlVsZxRjzE2Pa6YxxkyftWzO8wt3\nFJzayFMiclPbEmqo3GFEJIcgNvllRS8mog1EtE21OwrAa2rnxhJRTJVYWWznOuhn5zQA3FFwKg13\nFJw6garlcIYx9pdq66AjjStj7IKqFXKFMeagOj5c7fhGxphxOcWdBmCvura7KobBVZXWf2PV8aWs\nOAbIV6pjCxhjMxljAyFobu1UldlE1RJor2p1iA93VctjTSXtjISaoBtjbD1j7CITYk98rjo2FYLD\nimCMRaiO+TPGIlX1uIcx1rSccjjPOdxRcGojTdS6nfapjj0C0IOIPAAMBrBax3UTAKwiIjcID+ok\nlVzDYAAdVccLAQwrp/w+AK4yxkwAbAUwmIikEJQMJjLGWgAIAuBKRDIAi9UvJqIwABchvPm7EdFT\ntdM/q64tYjCA0EraGQhBpqOIeUTUHoAMgB9jTEZEqyFIancloq4qKY8QAG+q6vIigI/KKYfznFMr\nJTw4zz1PVQ9LdRoCWKPqky+EoFtUkkgA8xhj1gD2ElEcY6w7AE8AUSp5kyYQnI4udjLGngJIgCBD\n7QggnohiVed/BDAZwBoIsS42M8YOATik7xcjomTG2C2Vzk4cACcA51T5VsTORhBkW9TrKZgx9j6E\n/2tLCAF6rpS41kd1/JyqnEYQ6o3DKRXuKDh1hekAHgKQQ2gJawUlIqKfGGN/AugF4AhjbDyESF4/\nEtFcPcoYpi4gyBh7WVcilbaQNwSRuYEApgDoVoHvEgogGMBNAPuIiJjw1NbbTgCXIIxPfAvgbcZY\nGwAzAXgRURpjbCsE4buSMAC/E9HQCtjLec7hXU+cusJLAO6r4ge8C0H8TQPGmB2AW6rulgMQumCO\nAxjIGLNQpXmZ6R9T/B8ArRlj9qr9dwGcUvXpv0RERyA4MLmOazMhyJ7rYh+ESGNDITgNVNROlaDd\nfAA+jDEnCNHbsgFkMMZaAnirFFvOA+hY9J0YYy8wxnS1zjgcEe4oOHWFdQBGMsb+htBdk60jTTCA\na4yxaAhxKbapZhqFADjGGLsC4HcI3TLlQkS5ENQ19zDGrgJQAtgA4aF7SJXfWeju498KYEPRYHaJ\nfNMA3ABgS0QXVMcqbKdq7ONrCKqwf0OIj30TwE8QurOK+A7AUcZYBBElQ5iRtUtVTiSE+uRwSoWr\nx3I4HA6nTHiLgsPhcDhlwh0Fh8PhcMqEOwoOh8PhlAl3FBwOh8MpE+4oOBwOh1Mm3FFwOBwOp0y4\no+BwOBxOmfw/ENjAIthojMgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe7500472e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_classes = len(tags_counts)\n",
    "roc_auc(y_val, y_val_predicted_scores_tfidf, n_classes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Task 4 (MultilabelClassification).** Once we have the evaluation set up, we suggest that you experiment a bit with training your classifiers. We will use *F1-score weighted* as an evaluation metric. Our recommendation:\n",
    "- compare the quality of the bag-of-words and TF-IDF approaches and chose one of them.\n",
    "- for the chosen one, try *L1* and *L2*-regularization techniques in Logistic Regression with different coefficients (e.g. C equal to 0.1, 1, 10, 100).\n",
    "\n",
    "You also could try other improvements of the preprocessing / model, if you want. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.5/dist-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l1 1.0 mybag:  0.614807270477\n",
      "l1 1.0 tfidf:  0.566430263167\n",
      "l1 10.0 mybag:  0.658055475601\n",
      "l1 10.0 tfidf:  0.652466825421\n",
      "l1 100.0 mybag:  0.648994349315\n",
      "l1 100.0 tfidf:  0.648082183083\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.5/dist-packages/sklearn/metrics/classification.py:1135: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l2 1.0 mybag:  0.594123771934\n",
      "l2 1.0 tfidf:  0.39222890285\n",
      "l2 10.0 mybag:  0.651222850981\n",
      "l2 10.0 tfidf:  0.614355816313\n",
      "l2 100.0 mybag:  0.653855472852\n",
      "l2 100.0 tfidf:  0.654047625307\n"
     ]
    }
   ],
   "source": [
    "######################################\n",
    "######### YOUR CODE HERE #############\n",
    "######################################\n",
    "\n",
    "def train_classifier(X_train, y_train, regularization, coef):\n",
    "    \"\"\"\n",
    "      X_train, y_train — training data\n",
    "      \n",
    "      return: trained classifier\n",
    "    \"\"\"\n",
    "    \n",
    "    # Create and fit LogisticRegression wraped into OneVsRestClassifier.\n",
    "\n",
    "    classifier = OneVsRestClassifier(LogisticRegression(penalty=regularization, C = coef))\n",
    "    classifier.fit(X_train,y_train)\n",
    "    return classifier\n",
    "\n",
    "\n",
    "def predict_labels_scores(classifier,X):\n",
    "    y_predicted_labels = classifier.predict(X)\n",
    "    y_predicted_scores = classifier.decision_function(X)\n",
    "    return y_predicted_labels, y_predicted_scores\n",
    "     \n",
    "\n",
    "lreg = ['l1','l2']\n",
    "for reg in lreg:\n",
    "    c=0.1\n",
    "    while c<100:\n",
    "        classifier_mybag = train_classifier(X_train_mybag, y_train,reg,c)\n",
    "        classifier_tfidf = train_classifier(X_train_tfidf, y_train,reg,c)\n",
    "        c = c*10\n",
    "        y_val_predicted_labels_mybag, y_val_predicted_scores_mybag = predict_labels_scores(classifier_mybag,X_val_mybag)\n",
    "        y_val_predicted_labels_tfidf, y_val_predicted_scores_tfidf = predict_labels_scores(classifier_tfidf,X_val_tfidf)\n",
    "        print(reg,c,\"mybag: \",f1_score(y_val, y_val_predicted_labels_mybag, average='weighted'))  \n",
    "        print(reg,c,\"tfidf: \",f1_score(y_val, y_val_predicted_labels_tfidf, average='weighted'))  \n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When you are happy with the quality, create predictions for *test* set, which you will submit to Coursera."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current answer for task MultilabelClassification is:\n",
      " 0\tmysql,php\n",
      "1\thtml,javascript,jquery\n",
      "2\t\n",
      "3\tjavascript,jquery\n",
      "4\tandroid,java\n",
      "5\tparsing,php,xml\n",
      "6\tjson\n",
      "...\n"
     ]
    }
   ],
   "source": [
    "final_classifier = train_classifier(X_train_tfidf, y_train,'l2',100)\n",
    "y_test_predicted_labels_tfidf, y_test_predicted_scores_tfidf = predict_labels_scores(classifier_tfidf,X_test_tfidf)\n",
    "test_predictions = y_test_predicted_labels_tfidf\n",
    "test_pred_inversed = mlb.inverse_transform(test_predictions)\n",
    "\n",
    "test_predictions_for_submission = '\\n'.join('%i\\t%s' % (i, ','.join(row)) for i, row in enumerate(test_pred_inversed))\n",
    "grader.submit_tag('MultilabelClassification', test_predictions_for_submission)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis of the most important features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it is usually a good idea to look at the features (words or n-grams) that are used with the largest weigths in your logistic regression model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implement the function *print_words_for_tag* to find them. Get back to sklearn documentation on [OneVsRestClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.multiclass.OneVsRestClassifier.html) and [LogisticRegression](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html) if needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "def print_words_for_tag(classifier, tag, tags_classes, index_to_words, all_words):\n",
    "    \"\"\"\n",
    "        classifier: trained classifier\n",
    "        tag: particular tag\n",
    "        tags_classes: a list of classes names from MultiLabelBinarizer\n",
    "        index_to_words: index_to_words transformation\n",
    "        all_words: all words in the dictionary\n",
    "        \n",
    "        return nothing, just print top 5 positive and top 5 negative words for current tag\n",
    "    \"\"\"\n",
    "    print('Tag:\\t{}'.format(tag))\n",
    "    \n",
    "    # Extract an estimator from the classifier for the given tag.\n",
    "    # Extract feature coefficients from the estimator. \n",
    "    \n",
    "    ######################################\n",
    "    ######### YOUR CODE HERE #############\n",
    "    ######################################\n",
    "    #get the LogisticRegression estimator for the given tag \n",
    "    #then find the coef to that estimator\n",
    "    #print(index_to_words)\n",
    "    for estimator, is_ith_class in zip(classifier.estimators_, tags_classes):\n",
    "        if is_ith_class == tag:\n",
    "            print(estimator.coef_.shape)\n",
    "            poslist = sorted(zip(estimator.coef_[0], index_to_words), reverse=True )[:5]\n",
    "            neglist = sorted(zip(estimator.coef_[0], index_to_words) )[:5]\n",
    "            break\n",
    "\n",
    "    \n",
    "    \n",
    "    top_positive_words = list(index_to_words.get(x[1],None) for x in poslist)\n",
    "    top_negative_words = list(index_to_words.get(x[1],None) for x in neglist)\n",
    "    print('Top positive words:\\t{}'.format(', '.join(top_positive_words)))\n",
    "    print('Top negative words:\\t{}\\n'.format(', '.join(top_negative_words)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tag:\tc\n",
      "(1, 18300)\n",
      "Top positive words:\tc, malloc, scanf, fscanf, printf\n",
      "Top negative words:\tphp, java, python, javascript, c#\n",
      "\n",
      "Tag:\tc++\n",
      "(1, 18300)\n",
      "Top positive words:\tc++, qt, boost, mfc, stdstring\n",
      "Top negative words:\tjava, php, javascript, python, c#\n",
      "\n",
      "Tag:\tlinux\n",
      "(1, 18300)\n",
      "Top positive words:\tlinux, killed, system call, kernel space, dlopen\n",
      "Top negative words:\tjavascript, c#, aspnet, codeigniter, nokogiri\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print_words_for_tag(classifier_tfidf, 'c', mlb.classes, tfidf_reversed_vocab, ALL_WORDS)\n",
    "print_words_for_tag(classifier_tfidf, 'c++', mlb.classes, tfidf_reversed_vocab, ALL_WORDS)\n",
    "print_words_for_tag(classifier_tfidf, 'linux', mlb.classes, tfidf_reversed_vocab, ALL_WORDS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Authorization & Submission\n",
    "To submit assignment parts to Cousera platform, please, enter your e-mail and token into variables below. You can generate token on this programming assignment page. <b>Note:</b> Token expires 30 minutes after generation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You want to submit these parts:\n",
      "Task TextPrepare:\n",
      " sqlite php readonly\n",
      "creating multiple textboxes dynamically\n",
      "self one prefer javascript\n",
      "save php date...\n",
      "Task WordsTagsCount:\n",
      " javascript,c#,java\n",
      "using,php,java...\n",
      "Task BagOfWords:\n",
      " 8...\n",
      "Task MultilabelClassification:\n",
      " 0\tmysql,php\n",
      "1\thtml,javascript,jquery\n",
      "2\t\n",
      "3\tjavascript,jquery\n",
      "4\tandroid,java\n",
      "5\tparsing,php,xml\n",
      "6\tjson\n",
      "...\n"
     ]
    }
   ],
   "source": [
    "grader.status()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You want to submit these parts:\n",
      "Task TextPrepare:\n",
      " sqlite php readonly\n",
      "creating multiple textboxes dynamically\n",
      "self one prefer javascript\n",
      "save php date...\n",
      "Task WordsTagsCount:\n",
      " javascript,c#,java\n",
      "using,php,java...\n",
      "Task BagOfWords:\n",
      " [  0   1  11  33  36 181 304]...\n",
      "Task MultilabelClassification:\n",
      " 0\tmysql,php\n",
      "1\thtml,javascript,jquery\n",
      "2\t\n",
      "3\tjavascript,jquery\n",
      "4\tandroid,java\n",
      "5\tparsing,php,xml\n",
      "6\tjson\n",
      "...\n"
     ]
    }
   ],
   "source": [
    "STUDENT_EMAIL = \"lavina.thong@gmail.com\" \n",
    "STUDENT_TOKEN = \"L2j0x92YqkCQtD3Y\" \n",
    "grader.status()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to submit these answers, run cell below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You used an invalid email or your token may have expired. Please make sure you have entered all fields correctly. Try generating a new token if the issue still persists.\n"
     ]
    }
   ],
   "source": [
    "grader.submit(STUDENT_EMAIL, STUDENT_TOKEN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
